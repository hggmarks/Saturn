{
    "openapi": "3.0.0",
    "paths": {
      "/me": {
        "get": {
          "description": "<strong>Rate Limit</strong>: This endpoint has the limit of ```1 requests``` per ```1 seconds```.",
          "operationId": "MembersController_findOne",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Current member details were retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          },
          "summary": "Get current member details",
          "tags": [
            "Member Info"
          ]
        }
      },
      "/me/fees/trading": {
        "get": {
          "description": "Lists the trading fees of all markets. <br>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```1 requests``` per ```2 seconds```.",
          "operationId": "MembersController_listTradingFees",
          "parameters": [],
          "responses": {
            "200": {
              "description": "The response returns an array of object.<br>",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TradingFeesResponse"
                  }
                }
              }
            }
          },
          "summary": "Trading Fees",
          "tags": [
            "Member Info"
          ]
        }
      },
      "/currencies": {
        "get": {
          "description": "To obtain the currency icon, use this URL pattern: https://statics.foxbit.com.br/icons/colored/[CURRENCY_SYMBOL].svg<br><br>      <strong>Rate Limit</strong>: This endpoint has the limit of ```6 requests``` per ```1 seconds```.",
          "operationId": "CurrenciesController_index",
          "parameters": [],
          "responses": {
            "200": {
              "description": "A list of currencies was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Currencies"
                  }
                }
              }
            }
          },
          "summary": "List currencies",
          "tags": [
            "Market Data"
          ]
        }
      },
      "/markets": {
        "get": {
          "description": "<strong>Rate Limit</strong>: This endpoint has the limit of ```6 requests``` per ```1 seconds```.",
          "operationId": "MarketsController_index",
          "parameters": [],
          "responses": {
            "200": {
              "description": "A list of markets was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Markets"
                  }
                }
              }
            }
          },
          "summary": "List markets",
          "tags": [
            "Market Data"
          ]
        }
      },
      "/markets/quotes": {
        "get": {
          "description": "This endpoint provides a quotation based on market and side.\n    You can specify the amount or the quantity of the quote.</br>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```2 requests``` per ```2 seconds```",
          "operationId": "MarketsController_findQuote",
          "parameters": [
            {
              "name": "side",
              "required": true,
              "in": "query",
              "description": "Book side for quote search",
              "schema": {
                "example": "buy",
                "enum": [
                  "buy",
                  "sell"
                ],
                "type": "string"
              }
            },
            {
              "name": "base_currency",
              "required": true,
              "in": "query",
              "description": "The base currency is the currency against which exchange rates are typically quoted.\n      It serves as the reference point for determining the value of other currencies in a currency pair.\n      (e.g. BTC in BTCBRL)",
              "schema": {
                "example": "usdt",
                "type": "string"
              }
            },
            {
              "name": "quote_currency",
              "required": true,
              "in": "query",
              "description": "The quote currency is the second currency in a currency pair.\n      It represents the value of one unit of the base currency in terms of the quote currency.\n      (e.g. BRL in BTCBRL)",
              "schema": {
                "example": "brl",
                "type": "string"
              }
            },
            {
              "name": "Based on quantity or amount",
              "required": true,
              "in": "query",
              "description": "expand for details",
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/QuoteByAmount"
                  },
                  {
                    "$ref": "#/components/schemas/QuoteByQuantity"
                  }
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A market quotation based on a market and volume basis was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Quote"
                  }
                }
              }
            }
          },
          "summary": "Get a market quotation",
          "tags": [
            "Market Data"
          ]
        }
      },
      "/markets/{market_symbol}/orderbook": {
        "get": {
          "description": "This endpoint exports a copy of the order book of a specific market.</br>\n    See also [how to manage a local copy of the order book](#tag/Tutorials/How-to-manage-a-local-copy-of-the-order-book).</br>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```10 requests``` per ```2 seconds```\n    ",
          "operationId": "MarketsController_findOrderbook",
          "parameters": [
            {
              "name": "market_symbol",
              "required": true,
              "in": "path",
              "description": "The symbol of the market from witch the order book data will be exported",
              "schema": {
                "example": "BTCBRL",
                "type": "string"
              }
            },
            {
              "name": "depth",
              "required": false,
              "in": "query",
              "description": "The maximum number of asks and bids to be exported",
              "schema": {
                "maximum": 100,
                "default": 100,
                "example": 50,
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The order book data was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderbookDepth"
                  }
                }
              }
            },
            "404": {
              "description": "Market not found or not available"
            }
          },
          "summary": "Get order book",
          "tags": [
            "Market Data"
          ]
        }
      },
      "/markets/{market_symbol}/candlesticks": {
        "get": {
          "description": "Retrieve the candlestick charts/data <br><strong>Rate Limit</strong>: This endpoint has the limit of ```5 requests``` per ```2 seconds```.",
          "operationId": "MarketsController_findCandlesticks",
          "parameters": [
            {
              "name": "market_symbol",
              "required": true,
              "in": "path",
              "description": "The symbol of the market from witch the order book data will be exported",
              "schema": {
                "example": "btcbrl",
                "type": "string"
              }
            },
            {
              "name": "interval",
              "required": true,
              "in": "query",
              "examples": [
                "1m",
                "5m",
                "15m",
                "1d",
                "1M"
              ],
              "schema": {
                "enum": [
                  "1m",
                  "5m",
                  "15m",
                  "30m",
                  "1h",
                  "2h",
                  "4h",
                  "6h",
                  "12h",
                  "1d",
                  "1w",
                  "2w",
                  "1M"
                ],
                "type": "string"
              }
            },
            {
              "name": "start_time",
              "required": false,
              "in": "query",
              "description": "The earliest date in ticker history, it can be entered with minutes accuracy",
              "examples": [
                "2022-07-18T00:00",
                "2022-08-19T12:10"
              ],
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "end_time",
              "required": false,
              "in": "query",
              "description": "The most current date in ticker history, can be entered with a precision of minutes",
              "examples": [
                "2022-08-19T12:00",
                "2022-08-19T12:12"
              ],
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "description": "The maximum number of ticks to be returned (max 500)",
              "examples": [
                "100",
                "500"
              ],
              "schema": {
                "default": 100,
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "It returns an array nested with another array of strings.\n    All numbers (excluding date value) are represented as a string of decimals.",
              "content": {
                "application/json": {
                  "schema": {
                    "example": [
                      [
                        "1692918000000",
                        "127772.05150000",
                        "128467.99980000",
                        "127750.01000000",
                        "128353.99990000",
                        "1692918060000",
                        "0.17080431",
                        "21866.35948786",
                        66,
                        "0.12073605",
                        "15466.34096391"
                      ],
                      [
                        "1692921600000",
                        "128353.99990000",
                        "128353.99990000",
                        "127922.00030000",
                        "128339.99990000",
                        "1692921660000",
                        "0.12355465",
                        "15851.30631056",
                        45,
                        "0.11030870",
                        "14156.75206627"
                      ]
                    ],
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Candlestick"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Candlesticks not found or not available."
            }
          },
          "summary": "Get candlesticks",
          "tags": [
            "Market Data"
          ]
        }
      },
      "/markets/{market_symbol}/ticker/24hr": {
        "get": {
          "description": "Get last 24 hours ticker information, in real-time, for given market.<br>\n      <strong>Rate Limit</strong>: This endpoint has the limit of ```4 requests``` per ```2 seconds```.",
          "operationId": "MarketsController_ticker",
          "parameters": [
            {
              "name": "market_symbol",
              "required": true,
              "in": "path",
              "description": "The symbol of the market from witch the book data will be exported",
              "schema": {
                "example": "btcbrl",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The ticker data was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetTickerWithBestResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Market pair not found or not available."
            }
          },
          "summary": "Get ticker for a specific market",
          "tags": [
            "Market Data"
          ]
        }
      },
      "/markets/ticker/24hr": {
        "get": {
          "description": "Retrieve the ticker data of all markets.<br>\n    To obtain the currency icon, use this URL pattern: https://statics.foxbit.com.br/icons/colored/[CURRENCY_SYMBOL].svg.<br>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```2 requests``` per ```4 seconds```.",
          "operationId": "MarketsController_tickers",
          "parameters": [],
          "responses": {
            "200": {
              "description": "The ticker data was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetTickerResponse"
                  }
                }
              }
            }
          },
          "summary": "Get all markets ticker",
          "tags": [
            "Market Data"
          ]
        }
      },
      "/markets/{market_symbol}/trades/history": {
        "get": {
          "description": "Retrieve the trades of a specific market<br>      If the start_time and end_time are not sent,      the trades returned will be the last trades based on the quantity indicated in the page_size field.<br>      <strong>Rate Limit</strong>: This endpoint has the limit of ```5 requests``` per ```2 seconds```.",
          "operationId": "MarketsController_publicTrades",
          "parameters": [
            {
              "name": "market_symbol",
              "required": true,
              "in": "path",
              "description": "The market you want to filter",
              "schema": {
                "example": "btcbrl",
                "type": "string"
              }
            },
            {
              "name": "start_time",
              "required": false,
              "in": "query",
              "description": "Filter values after this start_time, in the format YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS",
              "examples": [
                "2024-01-01",
                "2024-01-01T06:25:09"
              ],
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "end_time",
              "required": false,
              "in": "query",
              "description": "Filter values before this end_time, in the format YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS",
              "examples": [
                "2024-01-01",
                "2024-01-01T06:25:09"
              ],
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "Page to be retrieved from the list",
              "examples": [
                1,
                10
              ],
              "schema": {
                "default": 1,
                "type": "number"
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "The number of entries returned",
              "examples": [
                10,
                100
              ],
              "schema": {
                "maximum": 200,
                "default": 50,
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The trades data was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PublicTrades"
                  }
                }
              }
            }
          },
          "summary": "Get trades",
          "tags": [
            "Market Data"
          ]
        }
      },
      "/orders": {
        "post": {
          "description": "Create an order with the specified characteristics <br/>\n    Required API Key permissions: ```trade```</br>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```30 requests``` per ```2 seconds```.\n    An order, after created can be presented in the following states:\n    <table>\n      <tr>\n        <th>State</th>\n        <th>Description</th>\n      </tr>\n      <tr>\n        <td>ACTIVE</td>\n        <td>The order is in the matching queue, waiting for deal</td>\n      </tr>\n      <tr>\n        <td>PARTIALLY_FILLED</td>\n        <td>\n          A part of the order has been filled and it is in the matching queue, waiting for deal\n        </td>\n      </tr>\n      <tr>\n        <td>FILLED</td>\n        <td>The order is already traded and not in the matching queue anymore</td>\n      </tr>\n      <tr>\n        <td>PARTIALLY_CANCELED</td>\n        <td>\n          The order is not in the matching queue anymore\n          The order was partially traded, but the remaining was canceled\n        </td>\n      </tr>\n      <tr>\n        <td>CANCELED</td>\n        <td>\n          The order is not in the matching queue anymore and is completely canceled\n          There is no trade associated with this order\n        </td>\n      </tr>\n    </table>",
          "operationId": "OrdersController_create",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrderMarket"
                    },
                    {
                      "$ref": "#/components/schemas/OrderLimit"
                    },
                    {
                      "$ref": "#/components/schemas/OrderStop"
                    },
                    {
                      "$ref": "#/components/schemas/OrderInstant"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "An order was created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderCreated"
                  }
                }
              }
            }
          },
          "summary": "Create an order",
          "tags": [
            "Trading"
          ]
        },
        "get": {
          "description": "<br><strong>Rate Limit</strong>: This endpoint has the limit of ```30 requests``` per ```2 seconds```.",
          "operationId": "OrdersController_listOrders",
          "parameters": [
            {
              "name": "start_time",
              "required": false,
              "in": "query",
              "description": "Filter values after this start_time, must be in ISO-8601 UTC, Maximum allowed range is 90 days from now",
              "schema": {
                "example": "2022-02-01T22:06:32.999Z",
                "type": "string"
              }
            },
            {
              "name": "end_time",
              "required": false,
              "in": "query",
              "description": "Filter values before this end_time, must be in ISO-8601 UTC, Maximum allowed range is 90 days from now",
              "schema": {
                "example": "2022-02-18T22:06:32.999Z",
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "The number of entries returned, maximum of 100",
              "schema": {
                "example": 10,
                "type": "number"
              }
            },
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "Page to be retrieved from the list",
              "schema": {
                "example": 1,
                "type": "number"
              }
            },
            {
              "name": "market_symbol",
              "required": false,
              "in": "query",
              "description": "The market where the order was placed",
              "schema": {
                "example": "btcbrl",
                "type": "string"
              }
            },
            {
              "name": "state",
              "required": false,
              "in": "query",
              "description": "The execution state of the orders",
              "schema": {
                "example": "ACTIVE",
                "enum": [
                  "ACTIVE",
                  "CANCELED",
                  "FILLED",
                  "PARTIALLY_CANCELED",
                  "PARTIALLY_FILLED"
                ],
                "type": "string"
              }
            },
            {
              "name": "side",
              "required": false,
              "in": "query",
              "description": "The order book side where the order was placed",
              "schema": {
                "example": "BUY",
                "enum": [
                  "BUY",
                  "SELL"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of orders was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Orders"
                  }
                }
              }
            }
          },
          "summary": "List orders",
          "tags": [
            "Trading"
          ]
        }
      },
      "/orders/batch": {
        "post": {
          "description": "Create multiple orders in single request.\n    Orders will be accepted if at least one order in the batch is successfully created<br/>\n    The maximum batch size is: ```5```<br>\n    Required API Key permissions: ```trade```</br>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```8 requests``` per ```2 seconds```.",
          "operationId": "createBatch",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreateBatchModel"
                }
              }
            }
          },
          "responses": {
            "202": {
              "description": "At least one creation was successfully executed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderBatchResponse"
                  }
                }
              }
            },
            "422": {
              "description": "No creation has been successfully executed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderBatchResponseError"
                  }
                }
              }
            }
          },
          "summary": "Create orders in batch",
          "tags": [
            "Trading"
          ]
        }
      },
      "/orders/cancel-replace": {
        "post": {
          "description": "Simultaneously cancel an existing order and create a new one.<br/>\n    Required API Key permissions: ```trade```</br>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```20 requests``` per ```2 seconds```.",
          "operationId": "OrdersController_cancelReplace",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCancelReplace"
                }
              }
            }
          },
          "responses": {
            "202": {
              "description": "At least one operation was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderCanceledReplaced"
                  }
                }
              }
            },
            "422": {
              "description": "Both operations were not successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderCancelReplaceError"
                  }
                }
              }
            }
          },
          "summary": "Cancel and replace",
          "tags": [
            "Trading"
          ]
        }
      },
      "/orders/{order_sn}": {
        "get": {
          "deprecated": true,
          "description": "This endpoint is being deprecated. Instead, use the GET by order ID.</br>      Get an order by serial number",
          "operationId": "OrdersController_findOrder",
          "parameters": [
            {
              "name": "order_sn",
              "required": true,
              "in": "path",
              "description": "Order serial number",
              "schema": {
                "example": "OQMPZNKZPFTKCS",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Order was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderWithoutRemark"
                  }
                }
              }
            }
          },
          "summary": "Get an order by SN",
          "tags": [
            "Trading"
          ]
        }
      },
      "/orders/by-order-id/{id}": {
        "get": {
          "description": "Get an order by ID <br/>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```30 requests``` per ```2 seconds```",
          "operationId": "OrdersController_findByOrderId",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Order id",
              "schema": {
                "example": 1,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Order was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "summary": "Get an order by ID",
          "tags": [
            "Trading"
          ]
        }
      },
      "/orders/by-client-order-id/{client_order_id}": {
        "get": {
          "description": "Get an order by its client-provided numeric identifier (max. of 2^53 - 1)</br>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```30 requests``` per ```2 seconds```",
          "operationId": "OrdersController_findByClientOrderId",
          "parameters": [
            {
              "name": "client_order_id",
              "required": true,
              "in": "path",
              "description": "Client order id",
              "schema": {
                "example": "57354679787653765",
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Order was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "summary": "Get an order by client ID",
          "tags": [
            "Trading"
          ]
        }
      },
      "/orders/cancel": {
        "put": {
          "description": "Cancel orders based on a criteria. Order cancelation is an asynchronous\n      processes, so it usually take some milliseconds to occur.<br/> Use the get order endpoint\n      to retrieve the order state<br>\n      Required API Key permissions: ```trade```</br>\n      <strong>Rate Limit</strong>: This endpoint has the limit of ```30 requests``` per ```2 seconds```.",
          "operationId": "OrdersController_cancel",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrdersCancelAll"
                    },
                    {
                      "$ref": "#/components/schemas/OrdersCancelMarket"
                    },
                    {
                      "$ref": "#/components/schemas/OrdersCancelMarketSide"
                    },
                    {
                      "$ref": "#/components/schemas/OrdersCancelSn"
                    },
                    {
                      "$ref": "#/components/schemas/OrdersCancelId"
                    },
                    {
                      "$ref": "#/components/schemas/OrdersCancelClientOrderId"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "A list of order SNs and Ids sent to the cancelation queue was returned successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrdersCanceled"
                  }
                }
              }
            }
          },
          "summary": "Cancel orders",
          "tags": [
            "Trading"
          ]
        }
      },
      "/trades": {
        "get": {
          "description": "Trade history queries will only have data available for the last 3 months, in descending order (most recents trades first). <br/>\n      You can open a ticket with us to get a longer historical information<br>\n      <strong>Rate Limit</strong>: This endpoint has the limit of ```5 requests``` per ```1 seconds```.",
          "operationId": "List trades",
          "parameters": [
            {
              "name": "market_symbol",
              "required": true,
              "in": "query",
              "description": "The market you want to filter",
              "schema": {
                "example": "btcbrl",
                "type": "string"
              }
            },
            {
              "name": "order_id",
              "required": false,
              "in": "query",
              "description": "The specific order ID identification you want to filter",
              "schema": {
                "example": "123456789",
                "type": "string"
              }
            },
            {
              "name": "start_time",
              "required": false,
              "in": "query",
              "description": "Filter values after this start_time, must be in ISO-8601 UTC, Maximum allowed range is 90 days from now",
              "schema": {
                "example": "2022-02-01T22:06:32.999Z",
                "type": "string"
              }
            },
            {
              "name": "end_time",
              "required": false,
              "in": "query",
              "description": "Filter values before this end_time, must be in ISO-8601 UTC, Maximum allowed range is 90 days from now",
              "schema": {
                "example": "2022-02-18T22:06:32.999Z",
                "type": "string"
              }
            },
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "Page to be retrieved from the list",
              "examples": [
                1,
                10
              ],
              "schema": {
                "default": 1,
                "type": "number"
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "The number of entries returned, maximum of 100",
              "examples": [
                10,
                100
              ],
              "schema": {
                "maximum": 100,
                "default": 50,
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of trades was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Trades"
                  }
                }
              }
            }
          },
          "summary": "List trades",
          "tags": [
            "Trading"
          ]
        }
      },
      "/system/time": {
        "get": {
          "description": "Returns the API server time in ISO-8601 and UNIX Timestamp formats with milliseconds precision <br>\n      <strong>Rate Limit</strong>: This endpoint has the limit of ```5 requests``` per ```1 seconds```.",
          "operationId": "SystemController_systemTime",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Server time was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SystemTime"
                  }
                }
              }
            }
          },
          "summary": "Get current time",
          "tags": [
            "System"
          ]
        }
      },
      "/accounts": {
        "get": {
          "description": "<strong>Rate Limit</strong>: This endpoint has the limit of ```15 requests``` per ```1 seconds```.",
          "operationId": "AccountsController_all",
          "parameters": [],
          "responses": {
            "200": {
              "description": "A list of member accounts was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Accounts"
                  }
                }
              }
            }
          },
          "summary": "Get member accounts",
          "tags": [
            "Account"
          ]
        }
      },
      "/deposits": {
        "get": {
          "description": "<strong>Rate Limit</strong>: This endpoint has the limit of ```3 requests``` per ```1 seconds```.",
          "operationId": "DepositsController_listOrders",
          "parameters": [
            {
              "name": "start_time",
              "required": false,
              "in": "query",
              "description": "Filter values after this start_time, must be in ISO-8601 UTC",
              "schema": {
                "example": "2022-02-01T22:06:32.999Z",
                "type": "string"
              }
            },
            {
              "name": "end_time",
              "required": false,
              "in": "query",
              "description": "Filter values before this end_time, must be in ISO-8601 UTC",
              "schema": {
                "example": "2022-02-18T22:06:32.999Z",
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "The number of entries returned, maximum of 100",
              "schema": {
                "example": 10,
                "type": "number"
              }
            },
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "Page to be retrieved from the list",
              "schema": {
                "example": 1,
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of deposits was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Deposits"
                  }
                }
              }
            }
          },
          "summary": "List deposits",
          "tags": [
            "Deposit"
          ]
        }
      },
      "/deposits/{deposit_sn}": {
        "get": {
          "description": "<strong>Rate Limit</strong>: This endpoint has the limit of ```3 requests``` per ```1 seconds```.",
          "operationId": "DepositsController_findDeposit",
          "parameters": [
            {
              "name": "deposit_sn",
              "required": true,
              "in": "path",
              "description": "The alphanumeric unique identifier of the deposit",
              "schema": {
                "example": "OKMAKSDHRVVREK",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Deposit was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Deposit"
                  }
                }
              }
            }
          },
          "summary": "Get a deposit",
          "tags": [
            "Deposit"
          ]
        }
      },
      "/deposits/address": {
        "get": {
          "description": "<strong>Rate Limit</strong>: This endpoint has the limit of ```3 requests``` per ```1 seconds```.",
          "operationId": "DepositsController_depositAddress",
          "parameters": [
            {
              "name": "network_code",
              "required": false,
              "in": "query",
              "description": "Wallet network. To see the deposit networks available for each currency, \n    check our <a href=\"https://docs.foxbit.com.br/rest/v3/#tag/Market-Data/operation/CurrenciesController_index\">currencies list</a> endpoint",
              "schema": {
                "example": "bitcoin",
                "type": "string"
              }
            },
            {
              "name": "currency_symbol",
              "required": true,
              "in": "query",
              "description": "Currency symbol",
              "schema": {
                "example": "btc",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A deposit address for the given currency was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DepositAddressFound"
                      },
                      {
                        "$ref": "#/components/schemas/DepositAddressCreating"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "currency_symbol must be a string"
            },
            "404": {
              "description": "Currency not found or not available"
            }
          },
          "summary": "Get a deposit address",
          "tags": [
            "Deposit"
          ]
        }
      },
      "/withdrawals": {
        "get": {
          "description": "<strong>Rate Limit</strong>: This endpoint has the limit of ```3 requests``` per ```1 seconds```.",
          "operationId": "WithdrawalsController_listWithdrawals",
          "parameters": [
            {
              "name": "start_time",
              "required": false,
              "in": "query",
              "description": "Filter values after this start_time, must be in ISO-8601 UTC",
              "schema": {
                "example": "2022-02-01T22:06:32.999Z",
                "type": "string"
              }
            },
            {
              "name": "end_time",
              "required": false,
              "in": "query",
              "description": "Filter values before this end_time, must be in ISO-8601 UTC",
              "schema": {
                "example": "2022-02-18T22:06:32.999Z",
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "The number of entries returned, maximum of 100",
              "schema": {
                "example": 10,
                "type": "number"
              }
            },
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "Page to be retrieved from the list",
              "schema": {
                "example": 1,
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of withdrawals was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Withdrawals"
                  }
                }
              }
            }
          },
          "summary": "List withdrawals",
          "tags": [
            "Withdrawal"
          ]
        },
        "post": {
          "description": "For cryptocurrency withdrawals, we highly recommend adding your withdrawal\n    address to our whitelist for a seamless and automated withdrawal process. While not mandatory,\n    not having your address whitelisted requires you to undergo a verification process via email,\n    including a proof of life for each withdrawal. This step ensures enhanced security for your funds but may delay your transactions.</br>\n    To add your address to the whitelist, please open a support ticket\n    <a href=\"https://faq.foxbit.com.br/hc/pt-br/requests/new\" target=\"_blank\">here</a>.</br></br>\n    Required API Key permissions: ```withdraw```</br>\n      <strong>Rate Limit</strong>: This endpoint has the limit of ```3 requests``` per ```1 seconds```.",
          "operationId": "WithdrawalsController_createWithdrawal",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/WithdrawalFiat"
                    },
                    {
                      "$ref": "#/components/schemas/WithdrawalCrypto"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "A withdrawal was created successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/WithdrawalCreatedFiat"
                      },
                      {
                        "$ref": "#/components/schemas/WithdrawalCreatedCrypto"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Permission denied for this request."
            }
          },
          "summary": "Create a withdrawal",
          "tags": [
            "Withdrawal"
          ]
        }
      },
      "/withdrawals/{withdrawal_sn}": {
        "get": {
          "description": "<strong>Rate Limit</strong>: This endpoint has the limit of ```3 requests``` per ```1 seconds```.",
          "operationId": "WithdrawalsController_findWithdrawal",
          "parameters": [
            {
              "name": "withdrawal_sn",
              "required": true,
              "in": "path",
              "description": "The alphanumeric unique identifier of the withdrawal",
              "schema": {
                "example": "DKMAKSDHRVVREK",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A withdrawal was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Withdrawal"
                  }
                }
              }
            }
          },
          "summary": "Get a withdrawal",
          "tags": [
            "Withdrawal"
          ]
        }
      },
      "/banks": {
        "get": {
          "description": "<strong>Rate Limit</strong>: This endpoint has the limit of ```1 requests``` per ```1 seconds```.",
          "operationId": "BanksController_all",
          "parameters": [],
          "responses": {
            "200": {
              "description": "A list of banks was retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Banks"
                  }
                }
              }
            }
          },
          "summary": "List banks",
          "tags": [
            "Banks"
          ]
        }
      },
      "/transactional_limits": {
        "get": {
          "description": "Requests a transactional limits. <br>\n    <strong>Rate Limit</strong>: This endpoint has the limit of ```1 requests``` per ```2 seconds```.",
          "operationId": "TransactionalLimitsController_listTransactionalLimits",
          "parameters": [],
          "responses": {
            "200": {
              "description": "The response returns an array of object.<br>",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionalLimitsResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Transactional limits not found or not available."
            }
          },
          "summary": "List Transactional Limits",
          "tags": [
            "Transactional Limits"
          ]
        }
      },
      "/otc/markets": {
        "get": {
          "description": "List OTC markets<br><strong>Rate Limit</strong>: This endpoint has the limit of ```1 request``` per ```second```",
          "operationId": "OtcController_listMarkets",
          "parameters": [],
          "responses": {
            "200": {
              "description": "List of OTC markets",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MarketsResponseModel"
                  }
                }
              }
            }
          },
          "summary": "List OTC markets",
          "tags": [
            "OTC"
          ]
        }
      },
      "/otc/quote/request": {
        "post": {
          "description": "Request a quotation with best price available      <br><strong>Rate Limit</strong>: This endpoint has the limit of ```5 requests``` per ```10 seconds```",
          "operationId": "OtcController_requestQuote",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestForQuote"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Quote requested successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestForQuoteResponseModel"
                  }
                }
              }
            }
          },
          "summary": "Request quote",
          "tags": [
            "OTC"
          ]
        }
      },
      "/otc/quote/execute": {
        "post": {
          "description": "Execute a quotation previously requested      <br><strong>Rate Limit</strong>: This endpoint has the limit of ```5 requests``` per ```10 seconds```",
          "operationId": "OtcController_executeQuote",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtcExecuteQuoteModel"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Quote created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExecuteQuoteCreatedModel"
                  }
                }
              }
            }
          },
          "summary": "Execute quote",
          "tags": [
            "OTC"
          ]
        }
      },
      "/otc/history": {
        "get": {
          "description": "List of executed quotes      <br><strong>Rate Limit</strong>: This endpoint has the limit of ```5 requests``` per ```2 seconds```",
          "operationId": "OtcController_history",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "Page number. Default: 1",
              "schema": {
                "example": 1,
                "type": "number"
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Page size. Default: 10; Max: 20",
              "schema": {
                "example": 10,
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of executed quotes",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OtcExecutionHistoryModel"
                  }
                }
              }
            }
          },
          "summary": "Execution history",
          "tags": [
            "OTC"
          ]
        }
      }
    },
    "info": {
      "version": "3.0",
      "title": "Foxbit REST API",
      "description": "<p>Foxbit API Support: <a href=\"https://faq.foxbit.com.br/hc/pt-br/requests/new\" target=\"_blank\">Help Center</a>.</p> <p>Exchange Plataform Status Information: <a href=\"https://status.foxbit.com/\" target=\"_blank\">Status Page</a>.</p>\n",
      "x-logo": {
        "url": "https://docs.foxbit.com.br/rest/v3/logo-with-text.svg",
        "href": "/"
      }
    },
    "tags": [
      {
        "name": "Introduction",
        "description": "Welcome to the official Foxbit's trader and developer documentation!\nHere, you'll find everything you need to know to integrate and utilize our services effectively.\nWhether you're a seasoned trader or just starting out, our comprehensive documentation provides clear guidance on how to make the most out of our API.\n### Features\n\n  - Robust Functionality: Explore the wide range of functionalities our API offers, including fetching real-time market data, placing orders, managing accounts, and much more.\n  - Detailed Guides: Step-by-step guides and tutorials help you get started quickly and navigate complex features effortlessly.\n  - Comprehensive Reference: Dive deep into our API endpoints, parameters, and response structures with our detailed reference documentation.\n\nWe also have a full API usage examples repository demonstrating how to integrate and utilize our API in various programming languages:\n  - <a href=\"https://github.com/foxbit-group/foxbit-api-samples/tree/main/rest-v3/dotnet\" target=\"_blank\">.NET</a>\n  - <a href=\"https://github.com/foxbit-group/foxbit-api-samples/tree/main/rest-v3/go\" target=\"_blank\">Go</a>\n  - <a href=\"https://github.com/foxbit-group/foxbit-api-samples/tree/main/rest-v3/java\" target=\"_blank\">Java</a>\n  - <a href=\"https://github.com/foxbit-group/foxbit-api-samples/tree/main/rest-v3/javascript\" target=\"_blank\">JavaScript</a>\n  - <a href=\"https://github.com/foxbit-group/foxbit-api-samples/tree/main/rest-v3/typescript\" target=\"_blank\">TypeScript</a>\n  - <a href=\"https://github.com/foxbit-group/foxbit-api-samples/tree/main/rest-v3/php\" target=\"_blank\">PHP</a>\n  - <a href=\"https://github.com/foxbit-group/foxbit-api-samples/tree/main/rest-v3/python\" target=\"_blank\">Python</a>\n  - <a href=\"https://github.com/foxbit-group/foxbit-api-samples/tree/main/rest-v3/ruby\" target=\"_blank\">Ruby</a>\n\n### Start Exploring\nReady to get started? Dive into our documentation and unleash the full potential of our Exchange API.<br>\nWhether you're building trading automations, conducting research, or developing innovative solutions, our API provides the tools you need to succeed.<br><br>\nHappy coding! 🚀\n"
      },
      {
        "name": "Authentication",
        "description": "Before being able to sign any requests, you must create an API key via the [Foxbit platform](https://app.foxbit.com.br/profile/api-key). After creating a key, you need to write down 2 pieces of information, Key and Secret.\nThe Key and Secret are generated and provided by Foxbit. Please note that the secret key cannot be recovered once lost. If you lost this information, please create a new API key.\n<h3 id=\"authentication-create-request\">Creating a Request</h3>\nAll private REST requests must contain the following headers:\n\n<b>X-FB-ACCESS-KEY</b> The API key as a string.<br/>\n<b>X-FB-ACCESS-TIMESTAMP</b> A timestamp for your request, generated with ```Date.now()```.<br/>\n<b>X-FB-ACCESS-SIGNATURE</b> The hex-encoded signature. See details below.<br/>\n<h3 id=\"authentication-generating-signature\">Generating the hex-encoded signature</h3>\n\nUse ```API Secret``` to encrypt the prehash string  with sha256 HMAC. The request body is a JSON string and needs to match the parameters passed to the API.\n\n<h3><a href=\"https://github.com/foxbit-group/foxbit-api-samples/blob/main/rest-v3/javascript/examples.js\" target=\"_blank\">Example using JavaScript</a></h3>\n"
      },
      {
        "name": "Rate Limit",
        "description": "Our rate limit allow a maximum requests (limit) in a time window (ttl).<br>\nFor public endpoints, we use your IP address as a key. But for private endpoint's, your SN is used as an indentifier.\n\nIf an endpoint does not have rate limit information in its documentation, then it will be using our global rate limit values:\n<table>\n  <thead>\n    <tr>\n      <th>Limit</th>\n      <th>Ttl</th>\n      <th>Block duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300 req</td>\n      <td>10 sec.</td>\n      <td>10 sec.</td>\n    </tr>\n  </tbody>\n</table>\n\nEndpoints with a specific rate limit (described in their documentation) will override this values.\n"
      },
      {
        "name": "Errors",
        "description": "If there is an error in the execution of the request or response, the payload will have the following format.\n```js\n{\n  \"error\": {\n    \"message\": \"Invalid symbol.\",\n    \"code\": 4004,\n    \"details\": [\n        \"The market or asset symbol is invalid or was not found.\",\n    ]\n  }\n}\n```\n<h4 id=\"some-common-examples\">Some Common Examples</h4>\n<div>\n  <table>\n    <thead>\n      <tr>\n        <th>Code</th>\n        <th>Message</th>\n        <th>Description</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>400</td>\n        <td>Bad request.</td>\n        <td>An unknown error occurred while processing request parameters.</td>\n      </tr>\n      <tr>\n        <td>429</td>\n        <td>Too many requests.</td>\n        <td>Request limit exceeded. Try again later.</td>\n      </tr>\n      <tr>\n        <td>404</td>\n        <td>Resource not found.</td>\n        <td>A resource was not found while processing the request.</td>\n      </tr>\n      <tr>\n        <td>500</td>\n        <td>Internal server error.</td>\n        <td>An unknown error occured while processing the request.</td>\n      </tr>\n      <tr>\n        <td>2001</td>\n        <td>Authentication error.</td>\n        <td>Error authenticating request.</td>\n      </tr>\n      <tr>\n        <td>2002</td>\n        <td>Invalid signature.</td>\n        <td>The signature for this request is not valid.</td>\n      </tr>\n      <tr>\n        <td>2003</td>\n        <td>Invalid access key.</td>\n        <td>Access key missing, invalid or not found.</td>\n      </tr>\n      <tr>\n        <td>2004</td>\n        <td>Invalid timestamp.</td>\n        <td>Invalid or missing timestamp.</td>\n      </tr>\n      <tr>\n        <td>2005</td>\n        <td>IP not allowed.</td>\n        <td>The IP address {IP_ADDR} isn't on the trusted list for this API key.</td>\n      </tr>\n      <tr>\n        <td>3001</td>\n        <td>Permission denied.</td>\n        <td>Permission denied for this request.</td>\n      </tr>\n      <tr>\n        <td>3002</td>\n        <td>KYC required.</td>\n        <td>A greater level of KYC verification is required to proceed with this request.</td>\n      </tr>\n      <tr>\n        <td>3003</td>\n        <td>Member disabled.</td>\n        <td>This member is disabled. Please get in touch with our support for more information.</td>\n      </tr>\n      <tr>\n        <td>4001</td>\n        <td>Validation error.</td>\n        <td>A validation error occurred.</td>\n      </tr>\n      <tr>\n        <td>4002</td>\n        <td>Insufficient funds.</td>\n        <td>Insufficient funds to proceed with this request.</td>\n      </tr>\n      <tr>\n        <td>4003</td>\n        <td>Quantity below the minimum allowed.</td>\n        <td>Quantity below the minimum allowed to proceed with this request.</td>\n      </tr>\n      <tr>\n        <td>4004</td>\n        <td>Invalid symbol.</td>\n        <td>The market or asset symbol is invalid or was not found.</td>\n      </tr>\n      <tr>\n        <td>4005</td>\n        <td>Invalid idempotent.</td>\n        <td>Characters allowed are \"a-z\", \"0-9\", \"_\" or \"-\", and 36 at max. We recommend UUID v4 in lowercase.</td>\n      </tr>\n      <tr>\n        <td>4007</td>\n        <td>Locked error.</td>\n        <td>There was an error in your allocated balance, please contact us.</td>\n      </tr>\n      <tr>\n        <td>4008</td>\n        <td>Cannot submit order.</td>\n        <td>The order cannot be created.</td>\n      </tr>\n      <tr>\n        <td>4009</td>\n        <td>Invalid level.</td>\n        <td>The sub-member does not have the required level to create the transaction.</td>\n      </tr>\n      <tr>\n        <td>4011</td>\n        <td>Too many open orders.</td>\n        <td>You have reached the limit of open orders per market/side.</td>\n      </tr>\n      <tr>\n        <td>4012</td>\n        <td>Too many simultaneous account operations.</td>\n        <td>We are currently unable to process your balance change due to simultaneous operations on your account. Please retry shortly.</td>\n      </tr>\n      <tr>\n        <td>5001</td>\n        <td>Service unavailable.</td>\n        <td>The requested resource is currently unavailable. Try again later.</td>\n      </tr>\n      <tr>\n        <td>5002</td>\n        <td>Service under maintenance.</td>\n        <td>The requested resource is currently under maintenace. Try again later.</td>\n      </tr>\n      <tr>\n        <td>5003</td>\n        <td>Market under maintenance.</td>\n        <td>The market is under maintenace. Try again later.</td>\n      </tr>\n      <tr>\n        <td>5004</td>\n        <td>Market is not deep enough.</td>\n        <td>The market is not deep enough to complete your request.</td>\n      </tr>\n      <tr>\n        <td>5005</td>\n        <td>Price out of range from market.</td>\n        <td>The order price is out of range from market to complete your request.</td>\n      </tr>\n      <tr>\n        <td>5006</td>\n        <td>Significant price deviation detected, exceeding acceptable limits.</td>\n        <td>The order price is exceeding acceptable limits from market to complete your request.</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n"
      },
      {
        "name": "Idempotent Requests",
        "description": "The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response. For example, if a request to create an order does not respond due to a network connection error, you can retry the request with the same idempotency key to guarantee that no more than one order is created.\n\nTo perform an idempotent request, provide an additional `X-Idempotent: <key>` header to the request.\n\nFoxbit's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key, regardless of whether it succeeded or failed. Subsequent requests with the same key return the same result, including 500 errors.\n\nAn idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys can be up to 36 characters long.\n\nKeys are eligible to be removed from the system automatically after they're at least 72 hours old, and a new request is generated if a key is reused after the original has been pruned.\n\nResults are only saved if an API endpoint started executing.\n\nIn case of concurrent request, only one of them will be process, the other request will return status code 409 and an error, the second request does not get saved by the idempotency.\n\nAll POST requests accept idempotency keys. Sending idempotency keys in GET, PUT or DELETE requests has no effect and should be avoided, as these requests are idempotent by definition.\n"
      },
      {
        "name": "Tutorials",
        "description": "## How to manage a local copy of the order book\n\n### Follow the steps below in sequential order\n\n1. Open a websocket stream to receive order book updates. When the connection opened, the returned data must be buffered. See [documentation](https://docs.foxbit.com.br/ws/v2/#operation-subscribe-SubscribeLevel2).\n  The first numeric item (so called ```ID```) in each update refers to an incremental number that represents the current state of the order book.\n2. Get a snapshot of the order book from our REST API. See [documentation](#tag/Market-Data/operation/MarketsController_findOrderbook).\n  The property ```sequence_id``` returned refers to an incremental number that represents the current state of the order book.\n3. Update your local copy of the order book each time the ```ID``` of an order book update is strictly equals to ```sequence_id + 1```.\n\n### Important\n\n- While listening to the stream, events can only be processed if their ```ID``` remains sequential.\n  If you find a gap between IDs, you need to restart the process from the beginning.\n- The data at each event contains the most recent quantity for a price level. If this quantity is zero, please, remove the price level.\n"
      },
      {
        "name": "Market Data",
        "description": "This module provides access to information about available cryptocurrency markets, including trading pairs, price data, volume\nand other relevant market statistics.\n"
      },
      {
        "name": "Banks",
        "description": "The Banks module facilitates interactions with external financial institutions or payment processors for handling fiat currency\ndeposits, withdrawals and other banking-related operations.\n"
      },
      {
        "name": "System",
        "description": "This module provides server information, ensuring optimal performance and reliability of the exchange platform.\n"
      },
      {
        "name": "Member Info",
        "description": "This module enables retrieval and management of user information, such as profile details, account level and status.\n"
      },
      {
        "name": "Trading",
        "description": "The Trading module facilitates the execution and management of cryptocurrency trades. Are included operations for market orders, limit orders\nand other trading-related functionalities.\n"
      },
      {
        "name": "Account",
        "description": "This module provides access to user account functionalities, including balances, transaction history, and account settings.\n"
      },
      {
        "name": "Deposit",
        "description": "The Deposit module handles the process of depositing cryptocurrencies or fiat currencies into user accounts,\nincluding generating deposit addresses and tracking deposit transactions.\n"
      },
      {
        "name": "Withdrawal",
        "description": "The Withdrawal module manages the withdrawal of funds from user accounts, allowing users to transfer cryptocurrencies or fiat currencies\n to external wallets or bank accounts.\n"
      },
      {
        "name": "Transactional Limits",
        "description": "This module defines and enforces transactional limits for deposits and withdrawals, helping to manage risk and compliance.\n"
      },
      {
        "name": "OTC",
        "description": "This module facilitates Over-The-Counter (OTC) cryptocurrency transactions by providing a secure and efficient way to execute large cryptocurrency trades.\nWith endpoints for history, market data, trade requests and execution, we ensure minimal market impact and enhanced privacy.\n"
      }
    ],
    "servers": [
      {
        "url": "https://api.foxbit.com.br/rest/v3"
      }
    ],
    "components": {
      "schemas": {
        "Member": {
          "type": "object",
          "properties": {
            "sn": {
              "type": "string",
              "description": "Alphanumeric unique identifier",
              "example": "FRR3DTLHGJ7DPB"
            },
            "email": {
              "type": "string",
              "description": "Email address",
              "example": "nakamoto.satoshi@example.com"
            },
            "level": {
              "type": "number",
              "description": "Registration level in the exchange",
              "example": 10
            },
            "created_at": {
              "type": "string",
              "description": "Creation date in ISO-8601 UTC",
              "example": "2021-11-25T13:23:27.961Z"
            },
            "disabled": {
              "type": "boolean",
              "description": "Status in the exchange",
              "example": false
            }
          }
        },
        "TradingFee": {
          "type": "object",
          "properties": {
            "market_symbol": {
              "type": "string",
              "example": "btcbrl",
              "description": "The market symbol"
            },
            "maker": {
              "type": "string",
              "example": "0.0025",
              "description": "The fee for the maker orders"
            },
            "taker": {
              "type": "string",
              "example": "0.005",
              "description": "The fee for the taker orders"
            }
          },
          "required": [
            "market_symbol",
            "maker",
            "taker"
          ]
        },
        "TradingFeesResponse": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The trading fees for all markets",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TradingFee"
              }
            }
          },
          "required": [
            "data"
          ]
        },
        "CurrencyCategory": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Currency kind code",
              "example": "cripto"
            },
            "name": {
              "type": "string",
              "description": "Currency kind display name",
              "example": "Cripto"
            }
          }
        },
        "CurrencyDepositInfo": {
          "type": "object",
          "properties": {
            "min_to_confirm": {
              "type": "string",
              "description": "Minimum number of confirmations",
              "example": "1"
            },
            "min_amount": {
              "type": "string",
              "description": "Minimum deposit amount",
              "example": "0.0001"
            },
            "enabled": {
              "type": "boolean",
              "description": "Value to check if new deposit address can be generated",
              "example": true
            }
          }
        },
        "CurrencyWithdrawInfo": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Value to check if that currency is available for withdraw",
              "example": true
            },
            "min_amount": {
              "type": "string",
              "description": "Withdraw's minimum amount",
              "example": "0.0001"
            },
            "fee": {
              "type": "string",
              "description": "Withdraw's fee",
              "example": "0.0001"
            }
          }
        },
        "NetworkDepositInfo": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Indicates if the network is active for deposits",
              "example": "ENABLED",
              "enum": [
                "ENABLED",
                "DISABLED"
              ]
            }
          }
        },
        "NetworkWithdrawInfo": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Indicates if the network is active for withdraws",
              "example": "ENABLED",
              "enum": [
                "ENABLED",
                "DISABLED"
              ]
            },
            "fee": {
              "type": "string",
              "description": "This value represents the estimated fee for performing a withdrawal.\n    Please note that this fee is an estimate based on current network conditions and may be updated frequently to reflect\n    changes in market conditions. We recommend checking the final fee at the time of the transaction to obtain the most accurate information.",
              "example": "0.0001"
            }
          }
        },
        "Network": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The network name",
              "example": "Bitcoin"
            },
            "code": {
              "type": "string",
              "description": "The network code. It will be used to create deposits and withdraws",
              "example": "btc"
            },
            "deposit_info": {
              "description": "Information about deposits in the network",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NetworkDepositInfo"
                }
              ]
            },
            "withdraw_info": {
              "description": "Information about withdraws in the network",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NetworkWithdrawInfo"
                }
              ]
            },
            "has_destination_tag": {
              "type": "boolean",
              "description": "Indicates if the network has destination tag",
              "example": false
            }
          }
        },
        "Currency": {
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "description": "Symbol",
              "example": "btc"
            },
            "name": {
              "type": "string",
              "description": "Name",
              "example": "Bitcoin"
            },
            "type": {
              "type": "string",
              "description": "Kind of currency",
              "example": "CRYPTO",
              "enum": [
                "CRYPTO",
                "FIAT"
              ]
            },
            "precision": {
              "type": "number",
              "description": "Number of decimals used by the currency",
              "example": 8
            },
            "category": {
              "description": "Extra information about coin kind",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCategory"
                }
              ]
            },
            "deposit_info": {
              "description": "Extra information about deposit",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyDepositInfo"
                }
              ]
            },
            "withdraw_info": {
              "description": "Extra information about withdraw",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyWithdrawInfo"
                }
              ]
            },
            "networks": {
              "description": "Extra information about currency networks",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Network"
              }
            }
          }
        },
        "Currencies": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The currencies",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          }
        },
        "QuoteByAmount": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string",
              "description": "Amount of the quote currency to be quoted",
              "example": "100.00"
            }
          },
          "required": [
            "amount"
          ]
        },
        "QuoteByQuantity": {
          "type": "object",
          "properties": {
            "quantity": {
              "type": "string",
              "description": "Quantity of the base currency to be quoted",
              "example": "0.6"
            }
          },
          "required": [
            "quantity"
          ]
        },
        "Market": {
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "description": "Symbol",
              "example": "btcbrl"
            },
            "quantity_min": {
              "type": "string",
              "description": "Min volume of the market",
              "example": "0.00000236"
            },
            "quantity_increment": {
              "type": "string",
              "description": "Increment value for the quantity of the market",
              "example": "0.00000001"
            },
            "quantity_precision": {
              "type": "number",
              "description": "Precision of ask in the market",
              "example": 8
            },
            "price_min": {
              "type": "string",
              "description": "Min price of the market",
              "example": "0.0001"
            },
            "price_increment": {
              "type": "string",
              "description": "Increment value for the price of the market",
              "example": "0.0001"
            },
            "price_precision": {
              "type": "number",
              "description": "Precision of bid in the market",
              "example": 4
            },
            "base": {
              "$ref": "#/components/schemas/Currency"
            },
            "quote": {
              "$ref": "#/components/schemas/Currency"
            }
          }
        },
        "Markets": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The markets",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Market"
              }
            }
          }
        },
        "Quote": {
          "type": "object",
          "properties": {
            "side": {
              "type": "string",
              "description": "Quote side",
              "example": "buy|sell"
            },
            "market_symbol": {
              "type": "string",
              "description": "Quote market symbol",
              "example": "usdtbrl"
            },
            "base_amount": {
              "type": "string",
              "description": "Base amount",
              "example": "0.00256410"
            },
            "quote_amount": {
              "type": "string",
              "description": "Quote amount",
              "example": "1000.0"
            },
            "price": {
              "type": "string",
              "description": "Average quote price",
              "example": "390000.00"
            }
          }
        },
        "OrderbookDepth": {
          "type": "object",
          "properties": {
            "sequence_id": {
              "type": "number",
              "description": "Incremental number that represents the current state of the order book",
              "example": 1234567890
            },
            "timestamp": {
              "type": "number",
              "description": "Timestamp in miliseconds associated to the sequence_id",
              "example": 1713187921336
            },
            "bids": {
              "description": "Array of bids where each item is an array composed of price and quantity",
              "example": [
                [
                  "3.00000000",
                  "300.00000000"
                ],
                [
                  "1.70000000",
                  "310.00000000"
                ]
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "asks": {
              "description": "Array of asks where each item is an array composed of price and quantity",
              "example": [
                [
                  "3.00000000",
                  "300.00000000"
                ],
                [
                  "2.00000000",
                  "321.00000000"
                ]
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "sequence_id",
            "timestamp",
            "bids",
            "asks"
          ]
        },
        "Candlestick": {
          "type": "object",
          "properties": {
            "0": {
              "type": "string",
              "example": "1501603632000",
              "description": "Open DateTime - UTC - Milliseconds since 1/1/1970 - POSIX format"
            },
            "1": {
              "type": "string",
              "example": "2687.01",
              "description": "Open price"
            },
            "2": {
              "type": "string",
              "example": "2700.33",
              "description": "Highest price"
            },
            "3": {
              "type": "string",
              "example": "2687.01",
              "description": "Lowest price"
            },
            "4": {
              "type": "string",
              "example": "2687.01",
              "description": "Close price"
            },
            "5": {
              "type": "string",
              "example": "1501603692000",
              "description": "Close DateTime - UTC - Milliseconds since 1/1/1970 - POSIX format"
            },
            "6": {
              "type": "string",
              "example": "24.86100992",
              "description": "Base Volume"
            },
            "7": {
              "type": "string",
              "example": "0.00002321",
              "description": "Quote Volume"
            },
            "8": {
              "type": "number",
              "example": "0",
              "description": "Number of trades"
            },
            "9": {
              "type": "string",
              "example": "0.00002321",
              "description": "Taker buy base volume"
            },
            "10": {
              "type": "string",
              "example": "0.00002321",
              "description": "Taker buy quote volume"
            }
          }
        },
        "LastTrade": {
          "type": "object",
          "properties": {
            "price": {
              "type": "string",
              "description": "The latest price at which the asset was traded",
              "example": "358504.69340000"
            },
            "volume": {
              "type": "string",
              "description": "The amount of the asset traded in the last trade",
              "example": "0.00027893"
            },
            "date": {
              "type": "string",
              "description": "The date of the last trade in ISO 8601 format",
              "example": "2024-01-01T00:00:00.000Z"
            }
          },
          "required": [
            "price",
            "volume",
            "date"
          ]
        },
        "Rolling24Hr": {
          "type": "object",
          "properties": {
            "price_change": {
              "type": "string",
              "description": "The absolute change in price over the past 24 hours",
              "example": "3211.87290000"
            },
            "price_change_percent": {
              "type": "string",
              "description": "The percentage change in price over the past 24 hours",
              "example": "0.90400726"
            },
            "volume": {
              "type": "string",
              "description": "The total value in base currency traded over the past 24 hours",
              "example": "20.03206866"
            },
            "quote_volume": {
              "type": "string",
              "description": "The total value in quote currency asset traded over the past 24 hours",
              "example": "7165463.92150000"
            },
            "trades_count": {
              "type": "number",
              "description": "The total number of trades executed for the asset over the past 24 hours",
              "example": "4376"
            },
            "open": {
              "type": "string",
              "description": "The opening price of the asset for the past 24-hour period",
              "example": "355292.82050000"
            },
            "high": {
              "type": "string",
              "description": "The highest price reached by the asset over the past 24 hours",
              "example": "362999.99990000"
            },
            "low": {
              "type": "string",
              "description": "The lowest price reached by the asset over the past 24 hours",
              "example": "355002.88880000"
            }
          },
          "required": [
            "price_change",
            "price_change_percent",
            "volume",
            "quote_volume",
            "trades_count",
            "open",
            "high",
            "low"
          ]
        },
        "BestSide": {
          "type": "object",
          "properties": {
            "price": {
              "type": "string",
              "description": "The current best price for buying (ask) or selling (bid) the asset",
              "example": "358504.69340000"
            },
            "volume": {
              "type": "string",
              "description": "The amount of the asset available for buying or selling at the best price",
              "example": "0.00027893"
            }
          },
          "required": [
            "price",
            "volume"
          ]
        },
        "Best": {
          "type": "object",
          "properties": {
            "ask": {
              "description": "Information about the best ask price and volume",
              "allOf": [
                {
                  "$ref": "#/components/schemas/BestSide"
                }
              ]
            },
            "bid": {
              "description": "Information about the best bid price and volume",
              "allOf": [
                {
                  "$ref": "#/components/schemas/BestSide"
                }
              ]
            }
          },
          "required": [
            "ask",
            "bid"
          ]
        },
        "TickerWithBest": {
          "type": "object",
          "properties": {
            "market_symbol": {
              "type": "string",
              "description": "The symbol of the asset being traded",
              "example": "btcbrl"
            },
            "last_trade": {
              "description": "Information about the most recent trade for this asset",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LastTrade"
                }
              ]
            },
            "rolling_24h": {
              "description": "Data on the asset's price and volume changes over the past 24 hours",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Rolling24Hr"
                }
              ]
            },
            "best": {
              "description": "Contains information about the current best ask and bid prices and volumes",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Best"
                }
              ]
            }
          },
          "required": [
            "market_symbol",
            "last_trade",
            "rolling_24h",
            "best"
          ]
        },
        "GetTickerWithBestResponse": {
          "type": "object",
          "properties": {
            "data": {
              "description": "An array of objects containing detailed information about each ticker, including last trade, 24-hour rolling data, and best ask/bid prices",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TickerWithBest"
              }
            }
          },
          "required": [
            "data"
          ]
        },
        "Ticker": {
          "type": "object",
          "properties": {
            "market_symbol": {
              "type": "string",
              "description": "The symbol of the asset being traded",
              "example": "btcbrl"
            },
            "last_trade": {
              "description": "Information about the most recent trade for this asset",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LastTrade"
                }
              ]
            },
            "rolling_24h": {
              "description": "Data on the asset's price and volume changes over the past 24 hours",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Rolling24Hr"
                }
              ]
            }
          },
          "required": [
            "market_symbol",
            "last_trade",
            "rolling_24h"
          ]
        },
        "GetTickerResponse": {
          "type": "object",
          "properties": {
            "data": {
              "description": "An array of objects containing basic ticker information, including market symbol, last trade, and 24-hour rolling data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Ticker"
              }
            }
          },
          "required": [
            "data"
          ]
        },
        "PublicTrade": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "Trade ID",
              "example": 1
            },
            "price": {
              "type": "string",
              "description": "Trade price",
              "example": "329248.74700000"
            },
            "volume": {
              "type": "string",
              "description": "Trade volume",
              "example": "0.00100000"
            },
            "taker_side": {
              "type": "string",
              "description": "Trade taker side",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "created_at": {
              "type": "string",
              "description": "The creation date of this order in ISO-8601 UTC",
              "example": "2024-01-01T00:00:00Z"
            }
          }
        },
        "PublicTrades": {
          "type": "object",
          "properties": {
            "data": {
              "description": "Public trades data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PublicTrade"
              }
            }
          }
        },
        "OrdersCancelAll": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of cancelation request",
              "example": "ALL",
              "enum": [
                "ALL",
                "MARKET",
                "MARKET_SIDE",
                "SN",
                "ID",
                "CLIENT_ORDER_ID"
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        "OrdersCancelMarket": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of cancelation request",
              "example": "MARKET",
              "enum": [
                "ALL",
                "MARKET",
                "MARKET_SIDE",
                "SN",
                "ID",
                "CLIENT_ORDER_ID"
              ]
            },
            "market_symbol": {
              "type": "string",
              "description": "Market to cancel orders",
              "example": "btcbrl"
            }
          },
          "required": [
            "type",
            "market_symbol"
          ]
        },
        "OrdersCancelMarketSide": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of cancelation request",
              "example": "MARKET_SIDE",
              "enum": [
                "ALL",
                "MARKET",
                "MARKET_SIDE",
                "SN",
                "ID",
                "CLIENT_ORDER_ID"
              ]
            },
            "market_symbol": {
              "type": "string",
              "description": "Market to cancel orders",
              "example": "btcbrl"
            },
            "side": {
              "type": "string",
              "description": "The side of the book to be canceled",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            }
          },
          "required": [
            "type",
            "market_symbol",
            "side"
          ]
        },
        "OrdersCancelSn": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of cancelation request",
              "example": "SN",
              "enum": [
                "ALL",
                "MARKET",
                "MARKET_SIDE",
                "SN",
                "ID",
                "CLIENT_ORDER_ID"
              ]
            },
            "sn": {
              "type": "string",
              "description": "SN of the order",
              "example": "OKMAKSDHRVVREK"
            }
          },
          "required": [
            "type",
            "sn"
          ]
        },
        "OrdersCancelClientOrderId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of cancelation request",
              "example": "CLIENT_ORDER_ID",
              "enum": [
                "ALL",
                "MARKET",
                "MARKET_SIDE",
                "SN",
                "ID",
                "CLIENT_ORDER_ID"
              ]
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier of the order",
              "example": "451637946501"
            }
          },
          "required": [
            "type",
            "client_order_id"
          ]
        },
        "OrdersCancelId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of cancelation request",
              "example": "ID",
              "enum": [
                "ALL",
                "MARKET",
                "MARKET_SIDE",
                "SN",
                "ID",
                "CLIENT_ORDER_ID"
              ]
            },
            "id": {
              "type": "number",
              "description": "ID of the order",
              "example": 123456789
            }
          },
          "required": [
            "type",
            "id"
          ]
        },
        "OrderMarket": {
          "type": "object",
          "properties": {
            "side": {
              "type": "string",
              "description": "The side of the order book you will place the order",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "type": {
              "type": "string",
              "description": "The type of the order to be created",
              "example": "MARKET",
              "enum": [
                "MARKET",
                "LIMIT",
                "INSTANT",
                "STOP_MARKET"
              ]
            },
            "market_symbol": {
              "type": "string",
              "description": "The market symbol of the order to be created",
              "example": "btcbrl"
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier (max. of 2^53 - 1) of the order",
              "example": "451637946501"
            },
            "remark": {
              "type": "string",
              "description": "A note for the order",
              "example": "A remarkable note for the order.",
              "maxLength": 100
            },
            "quantity": {
              "type": "string",
              "description": "The quantity of the base currency you want to buy or sell,\n      expressed in string format. <br/>\n      It needs to be a decimal with a maxinum of 16 decimal places",
              "example": "0.42"
            }
          },
          "required": [
            "side",
            "type",
            "market_symbol",
            "quantity"
          ]
        },
        "OrderLimit": {
          "type": "object",
          "properties": {
            "side": {
              "type": "string",
              "description": "The side of the order book you will place the order",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "type": {
              "type": "string",
              "description": "The type of the order to be created",
              "example": "LIMIT",
              "enum": [
                "MARKET",
                "LIMIT",
                "INSTANT",
                "STOP_MARKET"
              ]
            },
            "market_symbol": {
              "type": "string",
              "description": "The market symbol of the order to be created",
              "example": "btcbrl"
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier (max. of 2^53 - 1) of the order",
              "example": "451637946501"
            },
            "remark": {
              "type": "string",
              "description": "A note for the order",
              "example": "A remarkable note for the order.",
              "maxLength": 100
            },
            "quantity": {
              "type": "string",
              "description": "The quantity of the base currency you want to buy or sell,\n      expressed in string format. <br/>\n      It needs to be a decimal with a maxinum of 16 decimal places",
              "example": "0.42"
            },
            "price": {
              "type": "string",
              "description": "The price intended to buy or sell, expressed in the quote currency <br/>\n      and string formatted. It needs to be a decimal with a maxinum of 16 decimal places",
              "example": "250000.0"
            },
            "post_only": {
              "type": "boolean",
              "description": "When true your order will not be executed immediately in the market. <br />\n      It will exist as a maker order on the order book. Maker orders add liquidity to the market.",
              "example": true
            },
            "time_in_force": {
              "type": "string",
              "description": "<b>TimeInForce (TIF)</b> is a concept used in financial\n    order execution systems to specify how long an order must remain active before being executed or canceled.\n    You can currently use: <br /><b>Good 'til Cancelled (GTC):</b> is an order validity instruction that indicates that\n    the order will remain active in the market until it is fully executed or canceled manually by the trader;\n    <br /><b>Fill or Kill (FOK):</b> is a type of financial order that must be completely executed immediately or\n    it will not be executed at all;\n    <br /><b>Immediate or Cancel (IOC):</b> is a type of financial order states that if any part of the order\n    is not executed immediately, it must be canceled.",
              "example": "GTC",
              "enum": [
                "GTC",
                "FOK",
                "IOC"
              ]
            }
          },
          "required": [
            "side",
            "type",
            "market_symbol",
            "quantity",
            "price"
          ]
        },
        "OrderStop": {
          "type": "object",
          "properties": {
            "side": {
              "type": "string",
              "description": "The side of the order book you will place the order",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "type": {
              "type": "string",
              "description": "The type of the order to be created",
              "example": "STOP_MARKET",
              "enum": [
                "MARKET",
                "LIMIT",
                "INSTANT",
                "STOP_MARKET"
              ]
            },
            "market_symbol": {
              "type": "string",
              "description": "The market symbol of the order to be created",
              "example": "btcbrl"
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier (max. of 2^53 - 1) of the order",
              "example": "451637946501"
            },
            "remark": {
              "type": "string",
              "description": "A note for the order",
              "example": "A remarkable note for the order.",
              "maxLength": 100
            },
            "stop_price": {
              "type": "string",
              "description": "Price to trigger an stop order, expressed in the quote currency <br/>\n      and string formatted. It needs to be a decimal with a maxinum of 16 decimal places",
              "example": "240000.0"
            }
          },
          "required": [
            "side",
            "type",
            "market_symbol",
            "stop_price"
          ]
        },
        "OrderInstant": {
          "type": "object",
          "properties": {
            "side": {
              "type": "string",
              "description": "The side of the order book you will place the order",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "type": {
              "type": "string",
              "description": "The type of the order to be created",
              "example": "INSTANT",
              "enum": [
                "MARKET",
                "LIMIT",
                "INSTANT",
                "STOP_MARKET"
              ]
            },
            "market_symbol": {
              "type": "string",
              "description": "The market symbol of the order to be created",
              "example": "btcbrl"
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier (max. of 2^53 - 1) of the order",
              "example": "451637946501"
            },
            "remark": {
              "type": "string",
              "description": "A note for the order",
              "example": "A remarkable note for the order.",
              "maxLength": 100
            },
            "amount": {
              "type": "string",
              "description": "The amount intended to buy or sell, expressed in the quote currency\n      and string formatted. Use this field with orders of type INSTANT. <br/>\n      It needs to be a decimal with a maxinum of 16 decimal places",
              "example": "1000.0"
            }
          },
          "required": [
            "side",
            "type",
            "market_symbol",
            "amount"
          ]
        },
        "OrderCreated": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "Numeric unique identify of the order",
              "example": 1234567890
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier (max. of 2^53 - 1) of the order",
              "example": "451637946501"
            }
          }
        },
        "OrderCreateBatchModel": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/OrderMarket"
                  },
                  {
                    "$ref": "#/components/schemas/OrderLimit"
                  },
                  {
                    "$ref": "#/components/schemas/OrderStop"
                  },
                  {
                    "$ref": "#/components/schemas/OrderInstant"
                  }
                ]
              },
              "description": "Order create batch data"
            }
          },
          "required": [
            "data"
          ]
        },
        "ErrorDetails": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Error message",
              "example": "Cannot submit order."
            },
            "code": {
              "type": "number",
              "description": "Error code",
              "example": 4008
            },
            "details": {
              "description": "Error details",
              "example": [
                "The order cannot be created."
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "message",
            "code",
            "details"
          ]
        },
        "ErrorData": {
          "type": "object",
          "properties": {
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier (max. of 2^53 - 1) of the order",
              "example": "451637946501"
            },
            "error": {
              "description": "Error data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              ]
            }
          },
          "required": [
            "error"
          ]
        },
        "OrderBatchResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "description": "Order batch create response",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/OrderCreated"
                  },
                  {
                    "$ref": "#/components/schemas/ErrorData"
                  }
                ]
              },
              "example": [
                {
                  "client_order_id": "102938475610",
                  "error": {
                    "code": 4008,
                    "details": [
                      "The order cannot be created."
                    ],
                    "message": "Cannot submit order."
                  }
                },
                {
                  "id": 2148517470,
                  "client_order_id": "102938475611"
                },
                {
                  "id": 2148517476,
                  "client_order_id": null
                }
              ]
            }
          },
          "required": [
            "data"
          ]
        },
        "OrderBatchResponseError": {
          "type": "object",
          "properties": {
            "data": {
              "description": "Error details",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorData"
              }
            }
          },
          "required": [
            "data"
          ]
        },
        "OrderCancel": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of cancelation request",
              "example": "ID",
              "enum": [
                "ID",
                "CLIENT_ORDER_ID"
              ]
            },
            "id": {
              "type": "number",
              "description": "ID of the order",
              "example": 123456789
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier of the order",
              "example": "451637946501"
            }
          },
          "required": [
            "type",
            "id",
            "client_order_id"
          ]
        },
        "OrderCreate": {
          "type": "object",
          "properties": {
            "side": {
              "type": "string",
              "description": "The side of the order book you will place the order",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "type": {
              "type": "string",
              "description": "The type of the order to be created",
              "example": "INSTANT",
              "enum": [
                "MARKET",
                "LIMIT",
                "INSTANT",
                "STOP_MARKET"
              ]
            },
            "market_symbol": {
              "type": "string",
              "description": "The market symbol of the order to be created",
              "example": "btcbrl"
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier (max. of 2^53 - 1) of the order",
              "example": "451637946501"
            },
            "remark": {
              "type": "string",
              "description": "A note for the order",
              "example": "A remarkable note for the order.",
              "maxLength": 100
            },
            "quantity": {
              "type": "string",
              "description": "The quantity of the base currency you want to buy or sell,\n      expressed in string format. <br/>\n      It needs to be a decimal with a maxinum of 16 decimal places",
              "example": "0.42"
            },
            "price": {
              "type": "string",
              "description": "The price intended to buy or sell, expressed in the quote currency <br/>\n      and string formatted. It needs to be a decimal with a maxinum of 16 decimal places",
              "example": "250000.0"
            },
            "post_only": {
              "type": "boolean",
              "description": "When true your order will not be executed immediately in the market. <br />\n      It will exist as a maker order on the order book. Maker orders add liquidity to the market.",
              "example": true
            },
            "time_in_force": {
              "type": "string",
              "description": "<b>TimeInForce (TIF)</b> is a concept used in financial\n    order execution systems to specify how long an order must remain active before being executed or canceled.\n    You can currently use: <br /><b>Good 'til Cancelled (GTC):</b> is an order validity instruction that indicates that\n    the order will remain active in the market until it is fully executed or canceled manually by the trader;\n    <br /><b>Fill or Kill (FOK):</b> is a type of financial order that must be completely executed immediately or\n    it will not be executed at all;\n    <br /><b>Immediate or Cancel (IOC):</b> is a type of financial order states that if any part of the order\n    is not executed immediately, it must be canceled.",
              "example": "GTC",
              "enum": [
                "GTC",
                "FOK",
                "IOC"
              ]
            },
            "stop_price": {
              "type": "string",
              "description": "Price to trigger an stop order, expressed in the quote currency <br/>\n      and string formatted. It needs to be a decimal with a maxinum of 16 decimal places",
              "example": "240000.0"
            },
            "amount": {
              "type": "string",
              "description": "The amount intended to buy or sell, expressed in the quote currency\n      and string formatted. Use this field with orders of type INSTANT. <br/>\n      It needs to be a decimal with a maxinum of 16 decimal places",
              "example": "1000.0"
            }
          },
          "required": [
            "side",
            "type",
            "market_symbol",
            "quantity",
            "price",
            "stop_price",
            "amount"
          ]
        },
        "OrderCancelReplace": {
          "type": "object",
          "properties": {
            "mode": {
              "type": "string",
              "description": "Mode of the order cancel/replace.\n- `ALLOW_FAILURE`: In this mode, the cancellation and creation of orders are executed independently. This mode ensures that both operations are attempted without one being dependent on the success of the other.",
              "enum": [
                "ALLOW_FAILURE"
              ],
              "example": "ALLOW_FAILURE"
            },
            "cancel": {
              "description": "Order cancel parameters",
              "allOf": [
                {
                  "$ref": "#/components/schemas/OrderCancel"
                }
              ]
            },
            "create": {
              "description": "Order create parameters",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OrderMarket"
                },
                {
                  "$ref": "#/components/schemas/OrderLimit"
                },
                {
                  "$ref": "#/components/schemas/OrderStop"
                },
                {
                  "$ref": "#/components/schemas/OrderInstant"
                }
              ],
              "allOf": [
                {
                  "$ref": "#/components/schemas/OrderCreate"
                }
              ]
            }
          },
          "required": [
            "mode",
            "cancel",
            "create"
          ]
        },
        "OrderCanceled": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "ID of the order",
              "example": 123456789
            }
          }
        },
        "ErrorResponse": {
          "type": "object",
          "properties": {
            "error": {
              "description": "Error details",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              ]
            }
          },
          "required": [
            "error"
          ]
        },
        "OrderCanceledReplaced": {
          "type": "object",
          "properties": {
            "cancel": {
              "description": "Order cancel response",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OrderCanceled"
                },
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            },
            "create": {
              "description": "Order create response",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OrderCreated"
                },
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            }
          },
          "required": [
            "cancel",
            "create"
          ]
        },
        "OrderCancelReplaceError": {
          "type": "object",
          "properties": {
            "cancel": {
              "description": "Order cancel details response",
              "example": {
                "error": {
                  "code": 404,
                  "message": "Resource not found.",
                  "details": [
                    "Order not found."
                  ]
                }
              },
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            },
            "create": {
              "description": "Order create details response",
              "example": {
                "error": {
                  "code": 4004,
                  "message": "Invalid symbol.",
                  "details": [
                    "The market or asset symbol is invalid or not found."
                  ]
                }
              },
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            }
          },
          "required": [
            "cancel",
            "create"
          ]
        },
        "OrderWithoutRemark": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Numeric unique identifier",
              "example": "1234567890"
            },
            "sn": {
              "type": "string",
              "description": "Alphanumeric unique identifier (Deprecated by property \"id\")",
              "example": "OKMAKSDHRVVREK",
              "deprecated": true
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier of the order",
              "example": "451637946501"
            },
            "market_symbol": {
              "type": "string",
              "description": "The market where the order was placed",
              "example": "btcbrl"
            },
            "side": {
              "type": "string",
              "description": "The order book side where the order was placed",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "type": {
              "type": "string",
              "description": "The order type",
              "example": "LIMIT",
              "enum": [
                "MARKET",
                "LIMIT",
                "INSTANT",
                "STOP_MARKET"
              ]
            },
            "state": {
              "type": "string",
              "description": "The current order state",
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "CANCELED",
                "FILLED",
                "PARTIALLY_CANCELED",
                "PARTIALLY_FILLED"
              ]
            },
            "price": {
              "type": "string",
              "description": "The limit price, when it is a limit order",
              "example": "290000.0"
            },
            "price_avg": {
              "type": "string",
              "description": "The average traded price of the order",
              "example": "295333.3333"
            },
            "quantity": {
              "type": "string",
              "description": "The quantity intended to execute in this order",
              "example": "0.42"
            },
            "quantity_executed": {
              "type": "string",
              "description": "The current quantity executed of this order",
              "example": "0.41"
            },
            "instant_amount": {
              "type": "string",
              "description": "The amount intended to execute in this order (for INSTANT orders)",
              "example": "290.0"
            },
            "instant_amount_executed": {
              "type": "string",
              "description": "The current amount executed of this order (for INSTANT orders)",
              "example": "290.0"
            },
            "created_at": {
              "type": "string",
              "description": "The creation date of this order in ISO-8601 UTC",
              "example": "2021-02-15T22:06:32.999Z"
            },
            "trades_count": {
              "type": "number",
              "description": "The current number of trades executed with this order",
              "example": "2"
            },
            "funds_received": {
              "type": "string",
              "description": "The funds received by order executed",
              "example": "290.0"
            },
            "fee_paid": {
              "type": "string",
              "description": "The fee paid by order executed",
              "example": "0.0"
            },
            "post_only": {
              "type": "boolean",
              "description": "Flag to define adding liquidity to the market, and never match with orders already on the book.",
              "example": false
            },
            "time_in_force": {
              "type": "string",
              "description": "TimeInForce (TIF) is a concept used in financial\n      order execution systems to specify how long an order must remain active before being executed or canceled.",
              "example": "GTC"
            },
            "cancellation_reason": {
              "type": "number",
              "description": "Reason from cancellation state\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Code</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>NULL</td>\n            <td>Order state is not CANCEL</td>\n          </tr>\n          <tr>\n            <td>1</td>\n            <td>Requested by user</td>\n          </tr>\n          <tr>\n            <td>100</td>\n            <td>Applied by Exchange</td>\n          </tr>\n          <tr>\n            <td>101</td>\n            <td>Applied before failure trade</td>\n          </tr>\n          <tr>\n            <td>102</td>\n            <td>Order Instant with insufficient volume remaining after filled or not matched</td>\n          </tr>\n          <tr>\n            <td>103</td>\n            <td>Order StopMarket with insufficient volume remaining after filled</td>\n          </tr>\n          <tr>\n            <td>104</td>\n            <td>Order matched with counter order from the same member</td>\n          </tr>\n          <tr>\n            <td>105</td>\n            <td>Member without document number on Exchange</td>\n          </tr>\n          <tr>\n            <td>200</td>\n            <td>Limit order with TimeInForce ImmediateorCancel (IOC) doesn't matched</td>\n          </tr>\n          <tr>\n            <td>201</td>\n            <td>Limit order with TimeInForce FillOrKill (FOK) found no trading volume</td>\n          </tr>\n          <tr>\n            <td>202</td>\n            <td>Order PostOnly matched</td>\n          </tr>\n          <tr>\n            <td>203</td>\n            <td>Order Limit or Market with insufficient volume remaining after filled</td>\n          </tr>\n          <tr>\n            <td>204</td>\n            <td>Order Limit price out of range from Market</td>\n          </tr>    \n          <tr>\n            <td>205</td>\n            <td>Significant price deviation detected, exceeding acceptable limits during execution. \n            The remaining volume has been canceled due to a breached price limit.</td>\n          </tr>      \n        </tbody>\n      </table>\n    </div>",
              "example": 100
            }
          }
        },
        "Order": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Numeric unique identifier",
              "example": "1234567890"
            },
            "sn": {
              "type": "string",
              "description": "Alphanumeric unique identifier (Deprecated by property \"id\")",
              "example": "OKMAKSDHRVVREK",
              "deprecated": true
            },
            "client_order_id": {
              "type": "string",
              "description": "Client-provided numeric identifier of the order",
              "example": "451637946501"
            },
            "market_symbol": {
              "type": "string",
              "description": "The market where the order was placed",
              "example": "btcbrl"
            },
            "side": {
              "type": "string",
              "description": "The order book side where the order was placed",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "type": {
              "type": "string",
              "description": "The order type",
              "example": "LIMIT",
              "enum": [
                "MARKET",
                "LIMIT",
                "INSTANT",
                "STOP_MARKET"
              ]
            },
            "state": {
              "type": "string",
              "description": "The current order state",
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "CANCELED",
                "FILLED",
                "PARTIALLY_CANCELED",
                "PARTIALLY_FILLED"
              ]
            },
            "price": {
              "type": "string",
              "description": "The limit price, when it is a limit order",
              "example": "290000.0"
            },
            "price_avg": {
              "type": "string",
              "description": "The average traded price of the order",
              "example": "295333.3333"
            },
            "quantity": {
              "type": "string",
              "description": "The quantity intended to execute in this order",
              "example": "0.42"
            },
            "quantity_executed": {
              "type": "string",
              "description": "The current quantity executed of this order",
              "example": "0.41"
            },
            "instant_amount": {
              "type": "string",
              "description": "The amount intended to execute in this order (for INSTANT orders)",
              "example": "290.0"
            },
            "instant_amount_executed": {
              "type": "string",
              "description": "The current amount executed of this order (for INSTANT orders)",
              "example": "290.0"
            },
            "created_at": {
              "type": "string",
              "description": "The creation date of this order in ISO-8601 UTC",
              "example": "2021-02-15T22:06:32.999Z"
            },
            "trades_count": {
              "type": "number",
              "description": "The current number of trades executed with this order",
              "example": "2"
            },
            "remark": {
              "type": "string",
              "description": "A note for the order",
              "example": "A remarkable note for the order."
            },
            "funds_received": {
              "type": "string",
              "description": "The funds received by order executed",
              "example": "290.0"
            },
            "fee_paid": {
              "type": "string",
              "description": "The fee paid by order executed",
              "example": "0.0"
            },
            "post_only": {
              "type": "boolean",
              "description": "Flag to define adding liquidity to the market, and never match with orders already on the book.",
              "example": false
            },
            "time_in_force": {
              "type": "string",
              "description": "TimeInForce (TIF) is a concept used in financial\n      order execution systems to specify how long an order must remain active before being executed or canceled.",
              "example": "GTC"
            },
            "cancellation_reason": {
              "type": "number",
              "description": "Reason from cancellation state\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Code</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>NULL</td>\n            <td>Order state is not CANCEL</td>\n          </tr>\n          <tr>\n            <td>1</td>\n            <td>Requested by user</td>\n          </tr>\n          <tr>\n            <td>100</td>\n            <td>Applied by Exchange</td>\n          </tr>\n          <tr>\n            <td>101</td>\n            <td>Applied before failure trade</td>\n          </tr>\n          <tr>\n            <td>102</td>\n            <td>Order Instant with insufficient volume remaining after filled or not matched</td>\n          </tr>\n          <tr>\n            <td>103</td>\n            <td>Order StopMarket with insufficient volume remaining after filled</td>\n          </tr>\n          <tr>\n            <td>104</td>\n            <td>Order matched with counter order from the same member</td>\n          </tr>\n          <tr>\n            <td>105</td>\n            <td>Member without document number on Exchange</td>\n          </tr>\n          <tr>\n            <td>200</td>\n            <td>Limit order with TimeInForce ImmediateorCancel (IOC) doesn't matched</td>\n          </tr>\n          <tr>\n            <td>201</td>\n            <td>Limit order with TimeInForce FillOrKill (FOK) found no trading volume</td>\n          </tr>\n          <tr>\n            <td>202</td>\n            <td>Order PostOnly matched</td>\n          </tr>\n          <tr>\n            <td>203</td>\n            <td>Order Limit or Market with insufficient volume remaining after filled</td>\n          </tr>\n          <tr>\n            <td>204</td>\n            <td>Order Limit price out of range from Market</td>\n          </tr>    \n          <tr>\n            <td>205</td>\n            <td>Significant price deviation detected, exceeding acceptable limits during execution. \n            The remaining volume has been canceled due to a breached price limit.</td>\n          </tr>      \n        </tbody>\n      </table>\n    </div>",
              "example": 100
            }
          }
        },
        "Orders": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The order's list",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrderWithoutRemark"
              }
            }
          }
        },
        "OrdersCanceled": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The order's SNs and Ids list",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrderCanceled"
              }
            }
          }
        },
        "Trade": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "Numeric unique identifier of the trade.",
              "example": 1234567890
            },
            "sn": {
              "type": "string",
              "description": "Alphanumeric unique identifier (Deprecated by property \"id\").",
              "example": "TC5JZVW2LLJ3IW",
              "deprecated": true
            },
            "order_id": {
              "type": "number",
              "description": "Numeric unique identifier of the order.",
              "example": 1234567890
            },
            "market_symbol": {
              "type": "string",
              "description": "The market where the trade was created.",
              "example": "btcbrl"
            },
            "side": {
              "type": "string",
              "description": "The order book side where the trade was created.",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "price": {
              "type": "string",
              "description": "The price at which the trade was executed.",
              "example": "290000.0"
            },
            "quantity": {
              "type": "string",
              "description": "The quantity execute in this trade.",
              "example": "1.0"
            },
            "fee": {
              "type": "string",
              "description": "The total in fees paid in this trade.",
              "example": "0.01"
            },
            "fee_currency_symbol": {
              "type": "string",
              "description": "The currency symbol in which the fees were paid.",
              "example": "btc"
            },
            "role": {
              "type": "string",
              "description": "The role in the trade.",
              "example": "MAKER",
              "enum": [
                "MAKER",
                "TAKER"
              ]
            },
            "created_at": {
              "type": "string",
              "description": "The creation date of this trade in ISO-8601 UTC.",
              "example": "2021-02-15T22:06:32.999Z"
            }
          }
        },
        "Trades": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The trade",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Trade"
                }
              ]
            }
          }
        },
        "SystemTime": {
          "type": "object",
          "properties": {
            "iso": {
              "type": "string",
              "description": "Server time in ISO-8601",
              "example": "2021-06-15T18:00:00.123Z"
            },
            "timestamp": {
              "type": "number",
              "description": "Server time in UNIX Timestamp with milliseconds precision",
              "example": 1637342699407
            }
          }
        },
        "Account": {
          "type": "object",
          "properties": {
            "currency_symbol": {
              "type": "string",
              "description": "Currency of the account",
              "example": "btc"
            },
            "balance": {
              "type": "string",
              "description": "Total balance of the account",
              "example": "10000.0"
            },
            "balance_available": {
              "type": "string",
              "description": "Available balance",
              "example": "9000.0"
            },
            "balance_locked": {
              "type": "string",
              "description": "Locked balance",
              "example": "1000.0"
            }
          }
        },
        "Accounts": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The accounts",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "CurrencyNetwork": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the currency's network",
              "example": "Bitcoin Network"
            },
            "code": {
              "type": "string",
              "description": "Code of the currency's network",
              "example": "btc"
            }
          }
        },
        "DepositAddressFound": {
          "type": "object",
          "properties": {
            "currency_symbol": {
              "type": "string",
              "description": "Currency of the wallet",
              "example": "btc"
            },
            "address": {
              "type": "string",
              "description": "Address of the wallet",
              "example": "2N9sS8LgrY19rvcCWDmE1ou1tTVmqk4KQAB"
            },
            "message": {
              "type": "string",
              "description": "Status message of the response",
              "example": "Address was retrieved successfully"
            },
            "destination_tag": {
              "type": "string",
              "description": "Destination tag used by crypto"
            },
            "network": {
              "description": "Network of the currency.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyNetwork"
                }
              ]
            }
          }
        },
        "DepositAddressCreating": {
          "type": "object",
          "properties": {
            "currency_symbol": {
              "type": "string",
              "description": "Currency of the wallet",
              "example": "btc"
            },
            "message": {
              "type": "string",
              "description": "Status message of the response.",
              "example": "The address is being created. Please retry in a few minutes"
            },
            "destination_tag": {
              "type": "string",
              "description": "Destination tag used by crypto"
            },
            "network": {
              "description": "Network of the currency.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyNetwork"
                }
              ]
            }
          }
        },
        "DetailsCrypto": {
          "type": "object",
          "properties": {
            "transaction_id": {
              "type": "string",
              "description": "The Transaction ID on the blockchain",
              "example": "e20f035387020c5d5ea18ad53244f09f3"
            },
            "receiving_address": {
              "type": "string",
              "description": "The address of the wallet to which the funds were sent",
              "example": "2N2rTrnKEFcyJjEJqvVjgWZ3bKvKT7Aij61"
            },
            "network_code": {
              "type": "string",
              "description": "The identifier of the network on which the transaction was executed",
              "example": "bitcoin"
            }
          }
        },
        "Deposit": {
          "type": "object",
          "properties": {
            "sn": {
              "type": "string",
              "description": "The alphanumeric unique identifier of the deposit",
              "example": "OKMAKSDHRVVREK"
            },
            "state": {
              "type": "string",
              "description": "The current state of the deposit",
              "example": "ACCEPTED",
              "enum": [
                "SUBMITTING",
                "CANCELLED",
                "SUBMITTED",
                "REJECTED",
                "ACCEPTED",
                "WARNING",
                "BLOCKED",
                "UNBLOCKED"
              ]
            },
            "currency_symbol": {
              "type": "string",
              "description": "The currency of the deposit",
              "example": "btc"
            },
            "amount": {
              "type": "string",
              "description": "The amount of the deposit",
              "example": "1.0"
            },
            "fee": {
              "type": "string",
              "description": "The fee of the deposit",
              "example": "0.1"
            },
            "created_at": {
              "type": "string",
              "description": "The creation date of the deposit in ISO-8601 UTC",
              "example": "2022-02-18T22:06:32.999Z"
            },
            "details_crypto": {
              "description": "The details of the transaction",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DetailsCrypto"
                }
              ]
            }
          }
        },
        "Deposits": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The deposits list",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Deposit"
              }
            }
          }
        },
        "BankBranch": {
          "type": "object",
          "properties": {
            "number": {
              "type": "string",
              "description": "Branch number.",
              "example": "1234567890"
            },
            "digit": {
              "type": "object",
              "description": "Branch check digit.",
              "example": "1",
              "deprecated": true
            }
          },
          "required": [
            "number"
          ]
        },
        "BankAccount": {
          "type": "object",
          "properties": {
            "number": {
              "type": "string",
              "description": "Account number.",
              "example": "1234567890"
            },
            "digit": {
              "type": "string",
              "description": "Account check digit.",
              "example": "1"
            },
            "type": {
              "type": "string",
              "description": "Account type.",
              "enum": [
                "CHECK",
                "SAVINGS"
              ],
              "example": "CHECK"
            }
          },
          "required": [
            "number",
            "digit",
            "type"
          ]
        },
        "BankAccountData": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Bank code (as in https://docs.foxbit.com.br/rest/v3/#tag/Banks).",
              "example": "1"
            },
            "branch": {
              "description": "Bank branch data.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankBranch"
                }
              ]
            },
            "account": {
              "description": "Bank account data.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankAccount"
                }
              ]
            }
          },
          "required": [
            "code",
            "branch",
            "account"
          ]
        },
        "WithdrawalFiat": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string",
              "description": "Amount of money that will be sended",
              "example": "1"
            },
            "currency_symbol": {
              "type": "string",
              "description": "Currency symbol",
              "example": "brl"
            },
            "bank": {
              "description": "Bank branch data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankAccountData"
                }
              ]
            }
          },
          "required": [
            "amount",
            "bank"
          ]
        },
        "WithdrawalCrypto": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string",
              "description": "Amount of money that will be sended",
              "example": "1"
            },
            "currency_symbol": {
              "type": "string",
              "description": "Currency symbol",
              "example": "xrp"
            },
            "network_code": {
              "type": "string",
              "description": "Wallet network. To see the withdrawal networks available for each currency, \n    check our <a href=\"https://docs.foxbit.com.br/rest/v3/#tag/Market-Data/operation/CurrenciesController_index\">currencies list</a> endpoint",
              "example": "ripple"
            },
            "destination_address": {
              "type": "string",
              "description": "Wallet destination",
              "example": "0x1234567890123456789012345678"
            },
            "destination_tag": {
              "type": "string",
              "description": "Destination tag",
              "example": "123456"
            }
          },
          "required": [
            "amount",
            "currency_symbol",
            "destination_address"
          ]
        },
        "BankData": {
          "type": "object",
          "properties": {
            "bank": {
              "description": "The details of the transaction.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankAccountData"
                }
              ]
            }
          },
          "required": [
            "bank"
          ]
        },
        "WithdrawalCreatedFiat": {
          "type": "object",
          "properties": {
            "sn": {
              "type": "string",
              "description": "Withdraw sn",
              "example": "WBZYUBF73C4GUU"
            },
            "state": {
              "type": "string",
              "description": "Withdraw state",
              "enum": [
                "SUBMITTING",
                "SUBMITTED"
              ],
              "example": "SUBMITTED"
            },
            "currency_symbol": {
              "type": "string",
              "description": "Withdraw currency symbol",
              "example": "brl"
            },
            "amount": {
              "type": "string",
              "description": "Withdraw amount",
              "example": "0.5"
            },
            "fee": {
              "type": "string",
              "description": "Withdraw fee",
              "example": "0.5"
            },
            "created_at": {
              "type": "string",
              "description": "Withdraw created at",
              "example": "2022-09-15T12:38:18.510Z"
            },
            "details_fiat": {
              "description": "Details from account",
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankData"
                }
              ]
            }
          }
        },
        "DetailsWithdrawCryptoTag": {
          "type": "object",
          "properties": {
            "transaction_id": {
              "type": "string",
              "description": "The Transaction ID on the blockchain",
              "example": "e20f035387020c5d5ea18ad53244f09f3"
            },
            "destination_address": {
              "type": "string",
              "description": "The address of the wallet to which the funds were sent",
              "example": "2N2rTrnKEFcyJjEJqvVjgWZ3bKvKT7Aij61"
            },
            "destination_tag": {
              "type": "string",
              "description": "Destination tag used by crypto. Example for cryptocurrencies: XRP, EOS and others",
              "example": "456"
            },
            "network_code": {
              "type": "string",
              "description": "The identifier of the network on which the transaction was executed",
              "example": "bitcoin"
            }
          }
        },
        "WithdrawalCreatedCrypto": {
          "type": "object",
          "properties": {
            "sn": {
              "type": "string",
              "description": "Withdraw sn",
              "example": "WBZYUBF73C4GUU"
            },
            "state": {
              "type": "string",
              "description": "Withdraw state",
              "enum": [
                "SUBMITTING",
                "SUBMITTED"
              ],
              "example": "SUBMITTED"
            },
            "currency_symbol": {
              "type": "string",
              "description": "Withdraw currency symbol",
              "example": "xrp"
            },
            "amount": {
              "type": "string",
              "description": "Withdraw amount",
              "example": "0.5"
            },
            "fee": {
              "type": "string",
              "description": "Withdraw fee",
              "example": "0.5"
            },
            "created_at": {
              "type": "string",
              "description": "Withdraw created at",
              "example": "2022-09-15T12:38:18.510Z"
            },
            "details_crypto": {
              "description": "The details of the transaction",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DetailsWithdrawCryptoTag"
                }
              ]
            }
          }
        },
        "DetailsWithdrawCrypto": {
          "type": "object",
          "properties": {
            "transaction_id": {
              "type": "string",
              "description": "The Transaction ID on the blockchain",
              "example": "e20f035387020c5d5ea18ad53244f09f3"
            },
            "destination_address": {
              "type": "string",
              "description": "The address of the wallet to which the funds were sent",
              "example": "2N2rTrnKEFcyJjEJqvVjgWZ3bKvKT7Aij61"
            },
            "network_code": {
              "type": "string",
              "description": "The identifier of the network on which the transaction was executed",
              "example": "bitcoin"
            }
          }
        },
        "WithdrawalList": {
          "type": "object",
          "properties": {
            "sn": {
              "type": "string",
              "description": "The alphanumeric unique identifier of the withdrawal",
              "example": "OKMAKSDHRVVREK"
            },
            "state": {
              "type": "string",
              "description": "The current state of the withdrawal",
              "example": "ACCEPTED",
              "enum": [
                "SUBMITTING",
                "SUBMITTED",
                "PROCESSING",
                "CANCELED",
                "REJECTED",
                "FAILED",
                "DONE"
              ]
            },
            "rejection_reason": {
              "type": "string",
              "description": "The current rejection reason of the withdrawal",
              "example": "monthly_limit_exceeded",
              "enum": [
                "MONTHLY_LIMIT_EXCEEDED",
                "DIFFERENT_TITULARITY",
                "SYSTEM_FAILURE",
                "WALLET_ADDRESS_NOT_VALID",
                "WALLET_ADDRESS_SAME_OWNER"
              ]
            },
            "currency_symbol": {
              "type": "string",
              "description": "The currency of the withdrawal",
              "example": "btc"
            },
            "amount": {
              "type": "string",
              "description": "The amount of the withdrawal",
              "example": "1.0"
            },
            "fee": {
              "type": "string",
              "description": "The fee of the withdrawal",
              "example": "0.1"
            },
            "created_at": {
              "type": "string",
              "description": "The creation date of the withdrawal in ISO-8601 UTC",
              "example": "2022-02-18T22:06:32.999Z"
            },
            "details_crypto": {
              "description": "The details of the transaction",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DetailsWithdrawCrypto"
                }
              ]
            },
            "details_fiat": {
              "description": "Details from account",
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankData"
                }
              ]
            }
          }
        },
        "Withdrawals": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The withdrawals list",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WithdrawalList"
              }
            }
          }
        },
        "Withdrawal": {
          "type": "object",
          "properties": {
            "sn": {
              "type": "string",
              "description": "The alphanumeric unique identifier of the withdrawal",
              "example": "OKMAKSDHRVVREK"
            },
            "state": {
              "type": "string",
              "description": "The current state of the withdrawal",
              "example": "ACCEPTED",
              "enum": [
                "SUBMITTING",
                "SUBMITTED",
                "PROCESSING",
                "CANCELED",
                "REJECTED",
                "FAILED",
                "DONE"
              ]
            },
            "rejection_reason": {
              "type": "string",
              "description": "The current rejection reason of the withdrawal",
              "example": "monthly_limit_exceeded",
              "enum": [
                "MONTHLY_LIMIT_EXCEEDED",
                "DIFFERENT_TITULARITY",
                "SYSTEM_FAILURE",
                "WALLET_ADDRESS_NOT_VALID",
                "WALLET_ADDRESS_SAME_OWNER"
              ]
            },
            "currency_symbol": {
              "type": "string",
              "description": "The currency of the withdrawal",
              "example": "btc"
            },
            "amount": {
              "type": "string",
              "description": "The amount of the withdrawal",
              "example": "1.0"
            },
            "fee": {
              "type": "string",
              "description": "The fee of the withdrawal",
              "example": "0.1"
            },
            "created_at": {
              "type": "string",
              "description": "The creation date of the withdrawal in ISO-8601 UTC",
              "example": "2022-02-18T22:06:32.999Z"
            },
            "details_crypto": {
              "description": "The details of the transaction",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DetailsWithdrawCryptoTag"
                }
              ]
            },
            "details_fiat": {
              "description": "Details from account",
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankData"
                }
              ]
            }
          }
        },
        "Bank": {
          "type": "object",
          "properties": {
            "abbreviation": {
              "type": "string",
              "description": "Abbreviated name of the bank",
              "example": "BB"
            },
            "name": {
              "type": "string",
              "description": "Full name of the bank",
              "example": "Banco do Brasil"
            },
            "code": {
              "type": "number",
              "description": "Code of the bank",
              "example": "1"
            }
          }
        },
        "Banks": {
          "type": "object",
          "properties": {
            "data": {
              "description": "The banks",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Bank"
              }
            }
          }
        },
        "TransactionalLimit": {
          "type": "object",
          "properties": {
            "deposit": {
              "type": "string",
              "example": "150000",
              "description": "Deposit limit"
            },
            "withdraw": {
              "type": "string",
              "example": "300000",
              "description": "Withdrawal limit"
            }
          },
          "required": [
            "deposit",
            "withdraw"
          ]
        },
        "TransactionalLimits": {
          "type": "object",
          "properties": {
            "currency_code": {
              "type": "string",
              "example": "brl",
              "description": "Currency code"
            },
            "total": {
              "description": "Limits total",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TransactionalLimit"
                }
              ]
            },
            "avaliable": {
              "description": "Limits avaliable",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TransactionalLimit"
                }
              ]
            }
          },
          "required": [
            "currency_code",
            "total",
            "avaliable"
          ]
        },
        "TransactionalLimitsResponse": {
          "type": "object",
          "properties": {
            "data": {
              "description": "Member transactional limits.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TransactionalLimits"
              }
            }
          }
        },
        "MarketsBaseCurrencyModel": {
          "type": "object",
          "properties": {
            "precision": {
              "type": "string",
              "description": "Decimal places precision of currency",
              "examples": [
                8,
                6
              ]
            },
            "name": {
              "type": "string",
              "description": "Currency name",
              "examples": [
                "Bitcoin",
                "Etherium"
              ]
            },
            "symbol": {
              "type": "string",
              "description": "Currency symbol",
              "examples": [
                "btc",
                "eth"
              ]
            }
          },
          "required": [
            "precision",
            "name",
            "symbol"
          ]
        },
        "MarketsQuoteCurrencyModel": {
          "type": "object",
          "properties": {
            "precision": {
              "type": "string",
              "description": "Decimal places precision of currency",
              "examples": [
                8,
                6
              ]
            },
            "name": {
              "type": "string",
              "description": "Currency name",
              "examples": [
                "Real"
              ]
            },
            "symbol": {
              "type": "string",
              "description": "Currency symbol",
              "examples": [
                "brl"
              ]
            }
          },
          "required": [
            "precision",
            "name",
            "symbol"
          ]
        },
        "MarketModel": {
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "description": "Market symbol",
              "example": "btcusd"
            },
            "name": {
              "type": "string",
              "description": "Market name",
              "example": "BTC/USD"
            },
            "min_volume": {
              "type": "string",
              "description": "Min volume of the market",
              "example": "0.001"
            },
            "max_volume": {
              "type": "string",
              "description": "Max volume of the market",
              "example": "100"
            },
            "base": {
              "description": "Market base currency",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MarketsBaseCurrencyModel"
                }
              ]
            },
            "quote": {
              "description": "Market quote currency",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MarketsQuoteCurrencyModel"
                }
              ]
            }
          },
          "required": [
            "symbol",
            "name",
            "min_volume",
            "max_volume",
            "base",
            "quote"
          ]
        },
        "MarketsResponseModel": {
          "type": "object",
          "properties": {
            "data": {
              "description": "List of OTC markets",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MarketModel"
                }
              ]
            }
          },
          "required": [
            "data"
          ]
        },
        "RequestForQuote": {
          "type": "object",
          "properties": {
            "market_symbol": {
              "type": "string",
              "description": "The market symbol of the order to be created",
              "example": "btcbrl"
            },
            "side": {
              "type": "string",
              "description": "The side of the operation that you will place the order",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "quantity": {
              "type": "string",
              "description": "The quantity of the base currency you want to buy or sell, expressed in string format.",
              "example": "0.42"
            }
          },
          "required": [
            "market_symbol",
            "side",
            "quantity"
          ]
        },
        "RequestForQuoteResponseModel": {
          "type": "object",
          "properties": {
            "quote_id": {
              "type": "string",
              "description": "Unique identifier of the quote",
              "example": "0856c960-4aa7-401a-b309-23ebd0236191"
            },
            "market_symbol": {
              "type": "string",
              "description": "Market symbol",
              "example": "btcbrl"
            },
            "side": {
              "type": "string",
              "description": "Side of the operation",
              "example": "BUY",
              "enum": [
                "BUY",
                "SELL"
              ]
            },
            "quantity": {
              "type": "string",
              "description": "Quantity of the base currency",
              "example": "0.42"
            },
            "price": {
              "type": "string",
              "description": "Price unitary of the quote",
              "example": "178195.13"
            },
            "valid_until": {
              "type": "string",
              "description": "Valid until",
              "example": "2021-11-25T13:23:27.961Z"
            }
          },
          "required": [
            "quote_id",
            "market_symbol",
            "side",
            "quantity",
            "price",
            "valid_until"
          ]
        },
        "ExecuteQuoteCreatedModel": {
          "type": "object",
          "properties": {
            "quote_id": {
              "type": "string",
              "description": "Quote previously generated id",
              "example": "27d92819-7f8b-4da2-b6cf-8e5e3a7c6de5"
            },
            "client_order_id": {
              "type": "string",
              "description": "Client self managed order id",
              "example": "4babec3d-6a59-4775-841c-159f60c8a058"
            },
            "market_symbol": {
              "type": "string",
              "description": "Market symbol",
              "example": "btcbrl"
            },
            "price": {
              "type": "string",
              "description": "Order price",
              "example": "1890.40"
            },
            "quantity": {
              "type": "string",
              "description": "Order quantity",
              "example": "0.001"
            },
            "side": {
              "type": "string",
              "description": "Order side",
              "enum": [
                "BUY",
                "SELL"
              ],
              "example": "BUY"
            },
            "status": {
              "type": "string",
              "description": "Order status",
              "example": "CREATED"
            },
            "created": {
              "type": "string",
              "description": "Order creation date",
              "example": "2020-12-16T19:47:27.000Z"
            }
          },
          "required": [
            "quote_id",
            "market_symbol",
            "price",
            "quantity",
            "side",
            "status",
            "created"
          ]
        },
        "OtcExecuteQuoteModel": {
          "type": "object",
          "properties": {
            "client_order_id": {
              "type": "string",
              "description": "Client self managed order uuid",
              "example": "4babec3d-6a59-4775-841c-159f60c8a058"
            },
            "quote_id": {
              "type": "string",
              "description": "Generated quote id",
              "example": "27d92819-7f8b-4da2-b6cf-8e5e3a7c6de5"
            }
          },
          "required": [
            "quote_id"
          ]
        },
        "CurrencyInfo": {
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "description": "Currency symbol",
              "example": "btc"
            },
            "precision": {
              "type": "number",
              "description": "Currency precision",
              "example": 8
            }
          },
          "required": [
            "symbol",
            "precision"
          ]
        },
        "SubMemberOtcExecutionHistoryData": {
          "type": "object",
          "properties": {
            "quote_id": {
              "type": "string",
              "description": "Generated Quote ID",
              "example": "b5f1b6b0-0e4c-4d0e-8b1d-3e0e2a0c3b9a"
            },
            "client_order_id": {
              "type": "string",
              "description": "Client sel managed order ID",
              "examples": [
                "b5f1b6b0-0e4c-4d0e-8b1d-3e0e2a0c3b9a",
                null
              ]
            },
            "price": {
              "type": "string",
              "description": "Price of base currency when quote was executed",
              "example": "12500.32"
            },
            "market_symbol": {
              "type": "string",
              "description": "Market symbol",
              "example": "btcbrl"
            },
            "base": {
              "description": "Base currency information",
              "example": {
                "symbol": "btc",
                "precision": 8
              },
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyInfo"
                }
              ]
            },
            "quote": {
              "description": "Quote currency information",
              "example": {
                "symbol": "brl",
                "precision": 2
              },
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyInfo"
                }
              ]
            },
            "quantity": {
              "type": "string",
              "description": "Executed quantity",
              "example": "0.01"
            },
            "side": {
              "type": "string",
              "enum": [
                "BUY",
                "SELL"
              ],
              "description": "Side",
              "example": "BUY"
            },
            "status": {
              "type": "string",
              "enum": [
                "CREATED",
                "PENDING",
                "FILLED",
                "ERROR",
                "CANCELED"
              ],
              "description": "Executed quote status",
              "example": "FILLED"
            },
            "created_at": {
              "type": "string",
              "description": "Created at",
              "example": "2020-12-09T14:56:55.000Z"
            },
            "error_message": {
              "type": "string",
              "description": "Error message",
              "examples": [
                "Unexpected error while processing the order",
                null
              ]
            }
          },
          "required": [
            "quote_id",
            "client_order_id",
            "price",
            "market_symbol",
            "base",
            "quote",
            "quantity",
            "side",
            "status",
            "created_at"
          ]
        },
        "OtcExecutionHistoryData": {
          "type": "object",
          "properties": {
            "quote_id": {
              "type": "string",
              "description": "Generated Quote ID",
              "example": "b5f1b6b0-0e4c-4d0e-8b1d-3e0e2a0c3b9a"
            },
            "client_order_id": {
              "type": "string",
              "description": "Client sel managed order ID",
              "examples": [
                "b5f1b6b0-0e4c-4d0e-8b1d-3e0e2a0c3b9a",
                null
              ]
            },
            "price": {
              "type": "string",
              "description": "Price of base currency when quote was executed",
              "example": "12500.32"
            },
            "market_symbol": {
              "type": "string",
              "description": "Market symbol",
              "example": "btcbrl"
            },
            "quantity": {
              "type": "string",
              "description": "Executed quantity",
              "example": "0.01"
            },
            "side": {
              "type": "string",
              "enum": [
                "BUY",
                "SELL"
              ],
              "description": "Side",
              "example": "BUY"
            },
            "status": {
              "type": "string",
              "enum": [
                "CREATED",
                "PENDING",
                "FILLED",
                "ERROR",
                "CANCELED"
              ],
              "description": "Executed quote status",
              "example": "FILLED"
            },
            "created_at": {
              "type": "string",
              "description": "Created at",
              "example": "2020-12-09T14:56:55.000Z"
            },
            "error_message": {
              "type": "string",
              "description": "Error message",
              "examples": [
                "Unexpected error while processing the order",
                null
              ]
            }
          },
          "required": [
            "quote_id",
            "client_order_id",
            "price",
            "market_symbol",
            "quantity",
            "side",
            "status",
            "created_at"
          ]
        },
        "OtcExecutionHistoryModel": {
          "type": "object",
          "properties": {
            "total": {
              "type": "number",
              "description": "Total number of records",
              "example": 12
            },
            "data": {
              "description": "Execution history data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OtcExecutionHistoryData"
              }
            }
          },
          "required": [
            "total",
            "data"
          ]
        }
      }
    },
    "x-tagGroups": [
      {
        "name": "",
        "tags": [
          "Introduction",
          "Authentication",
          "Rate Limit",
          "Errors",
          "Idempotent Requests",
          "Tutorials"
        ]
      },
      {
        "name": "Public Endpoints",
        "tags": [
          "Market Data",
          "Banks",
          "System"
        ]
      },
      {
        "name": "Authenticated Endpoints",
        "tags": [
          "Member Info",
          "Trading",
          "Account",
          "Deposit",
          "Withdrawal",
          "Transactional Limits",
          "Automation",
          "OTC"
        ]
      }
    ]
  }
